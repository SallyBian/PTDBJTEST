  DOCUMENT("2/190 04-KRC 161 890/1")
  REVISION("A8")
  DESCRIPTION("Radio 4429 G3")

DEFINE BUTTONS BEGIN
  BUTTON( "mTail", "EXE", "mTail\mTail.exe", "mTail", "C:\Users\Public\Teststation\Blob\Testprogram.log", "")
  BUTTON( "Maintenance", "EXE", "ExeFiles\MaintenanceEx.exe", "ButtonMaintenanceDialog", "", "")
  BUTTON( "Log Configuration", "EXE", "ExeFiles\LOG.exe", "Logger", "", "")
END_BUTTONS

DEFINE RESOURCES BEGIN
  RESOURCE(PEC, Ericsson.TM.Pec.dll, )
  RESOURCE(Registration, Ericsson.TM.Registration.exe, )
  RESOURCE(RcmUtilities, Ericsson.TM.RcmUtilities.dll, )
  RESOURCE(TifBcRadio2, Ericsson.TM.TifBcRadio2.dll, )
  RESOURCE(TestFlowControl, Ericsson.TM.TestFlowControl.dll, )
  RESOURCE(TestUtilities, Ericsson.TM.TestUtilities.dll, )
  RESOURCE(NetworkUtils, Ericsson.TM.NetworkUtils.dll, )
  RESOURCE(NetBoot, Ericsson.TM.Netboot.dll, )
  RESOURCE(TimeCollection, Ericsson.TM.TimeCollection.dll, )
  RESOURCE(DutCommunication, Ericsson.TM.DutCommunication.dll, )
  RESOURCE(DutConfiguration, Ericsson.TM.DutConfiguration.dll, )
  RESOURCE(DutConfiguration2, Ericsson.TM.DutConfiguration2.dll, )
  RESOURCE(tmTxCalibration4, Ericsson.TM.TxCalibration4.dll, )
  RESOURCE(tmTxPerformance4, Ericsson.TM.TxPerformance4.dll, )
  RESOURCE(tmRxCalibration4, Ericsson.TM.RxCalibration4.dll, )
  RESOURCE(tmRxPerformance4, Ericsson.TM.RxPerformance4.dll, )
  RESOURCE(tmTorPerformance4, Ericsson.TM.TorPerformance4.dll, )
  RESOURCE(CommonRadio, Ericsson.TM.CommonRadio.dll, )
  RESOURCE(DcDc2, Ericsson.TM.DcDc2.dll, )
  RESOURCE(TestHw, Ericsson.TM.TestHw.dll, )
  RESOURCE(Digital3, Ericsson.TM.Digital3.dll, )
  RESOURCE(Digital4, Ericsson.TM.Digital4.dll, )
  RESOURCE(FlashProgramming, Ericsson.TM.FlashProgramming.dll, )
  RESOURCE(Mmi2, Ericsson.TM.Mmi2.dll, )

  RESOURCE(tmMaintenance, Ericsson.TM.Maintenance.dll, )
  RESOURCE(tmFlash, Ericsson.TM.FlashProgramming.dll, )
  RESOURCE(TestNGT, Ericsson.TM.ProductionTestNGT.dll, )
  RESOURCE(tmTestUtilities, Ericsson.TM.TestUtilities.dll, )
END_RESOURCES

DEFINE MCS BEGIN
  MC(KillProcesses, NET, PEC, Ericsson.TM.TmKillProcesses, "", "")
  MC(VirtualMemoryUsage, NET, PEC, Ericsson.TM.TmVirtualMemoryUsage, "", "")
  MC(MemoryUsage, NET, PEC, Ericsson.TM.TmMemoryUsage, "", "")

  MC(Registration, NET, Registration, Ericsson.TM.TmRegistration, "", "")

  MC(RcmInitialize, NET, RcmUtilities, Ericsson.TM.TmRcmInitialize, "", "")
  MC(RcmRelease, NET, RcmUtilities, Ericsson.TM.TmRcmRelease, "", "")
  MC(RcmParallelTasks, NET, RcmUtilities, Ericsson.TM.TmRcmParallelTasks, "", "")
  MC(VerifyValue, NET, TestNGT, Ericsson.TM.TmVerifyValue, "", "")

  MC(TifRestart, NET, TifBcRadio2, Ericsson.TM.TmTifRestart, "", "")
  MC(TifLoadFile, NET, TifBcRadio2, Ericsson.TM.TmTifLoadFile, "", "")
  MC(TifReadInt, NET, TifBcRadio2, Ericsson.TM.TmTifReadInt, "", "")
  MC(TifHwInfo, NET, TifBcRadio2, Ericsson.TM.TmTifHwInfo, "", "")

  MC(PictureViewerInfo, NET, TestFlowControl, Ericsson.TM.TmPictureViewerInfo, "", "")
  MC(InitializeSampleBasedTests, NET, TestFlowControl, Ericsson.TM.TmInitializeSampleBasedTests, "", "")
  MC(BlockTPStatement, NET, TestFlowControl, Ericsson.TM.TmBlockTpStatement, "", "")
  MC(ReportFirstTime, NET, TestFlowControl, Ericsson.TM.TmReportFirstTime, "", "")
  MC(GetSampleBasedTests, NET, TestFlowControl, Ericsson.TM.TmGetSampleBasedTests, "", "")
  MC(CompareMeasurement, NET, TestFlowControl, Ericsson.TM.TmCompareMeasurement, "", "")

  MC(EnableTextOutWithThreadId, NET, TestUtilities, Ericsson.TM.TestUtilities.EnableTextOutWithThreadId, "", "")
  MC(EnableLogMessagesInTextOut, NET, TestUtilities, Ericsson.TM.TestUtilities.EnableLogMessagesInTextOut, "", "")
  MC(EnableLoggingToFile, NET, TestUtilities, Ericsson.TM.TestUtilities.EnableLoggingToFile, "", "")
  MC(PrintTestCaseInformation, NET, TestUtilities, Ericsson.TM.TestUtilities.PrintTestCaseInformation, "", "")
  MC(PrintTestStationInformation, NET, TestUtilities, Ericsson.TM.TestUtilities.PrintTestStationInformation, "", "")
  MC(DisableLoggingToFile, NET, TestUtilities, Ericsson.TM.TestUtilities.DisableLoggingToFile, "", "")
  MC(DisableLogMessagesInTextOut, NET, TestUtilities, Ericsson.TM.TestUtilities.DisableLogMessagesInTextOut, "", "")
  MC(StoreBlob, NET, TestUtilities, Ericsson.TM.TestUtilities.StoreBlob, "", "")
  MC(PrintComputerTime, NET, TestUtilities, Ericsson.TM.TestUtilities.PrintComputerTime, "", "")
  MC(PrintTestMethodSeparator, NET, TestUtilities, Ericsson.TM.TestUtilities.PrintTestMethodSeparator, "", "")

  MC(InitNetworkListener, NET, NetworkUtils, Ericsson.TM.TmInitNetworkListener, "", "")
  MC(ExitNetworkListener, NET, NetworkUtils, Ericsson.TM.TmExitNetworkListener, "", "")

  MC(TerminateServer, NET, NetBoot, Ericsson.TM.TmTerminateServer, "", "")
  MC(PrepareFilesResource, NET, NetBoot, Ericsson.TM.TmPrepareFilesResource, "", "")
  MC(PrepareNetbootdResource, NET, NetBoot, Ericsson.TM.TmPrepareNetbootdResource, "", "")
  MC(Initialise, NET, NetBoot, Ericsson.TM.TmInitialise, "", "")

  MC(EventTpActivateTimeMeas, NET, TimeCollection, Ericsson.TM.TmEventTpActivateTimeMeas, "", "")
  MC(SaveTotalTime, NET, TimeCollection, Ericsson.TM.TmSaveTotalTime, "", "")
  MC(DumpTimeListToFile, NET, TimeCollection, Ericsson.TM.TmDumpTimeListToFile, "", "")
  MC(SaveTimeListTime, NET, TimeCollection, Ericsson.TM.TmSaveTimeListTime, "", "")
  MC(EventMethodStartTimeMeas, NET, TimeCollection, Ericsson.TM.TmEventMethodStartTimeMeas, "", "")
  MC(EventMethodEndTimeMeasTotalTime, NET, TimeCollection, Ericsson.TM.TmEventMethodEndTimeMeasTotalTime, "", "")

  MC(CommunicationProtocol, NET, DutCommunication, Ericsson.TM.TmCommunicationProtocol, "", "")
  MC(OpenPort, NET, DutCommunication, Ericsson.TM.TmOpenPort, "", "")
  MC(SetBaudRateInPc, NET, DutCommunication, Ericsson.TM.TmSetBaudRateInPc, "", "")
  MC(ClosePort, NET, DutCommunication, Ericsson.TM.TmClosePort, "", "")
  MC(mSaveString, NET, DutCommunication, Ericsson.TM.TmSaveString, "", "")
  MC(mExecuteTest, NET, DutCommunication, Ericsson.TM.TmExecuteTest, "", "")
  MC(mReadInt, NET, DutCommunication, Ericsson.TM.TmReadInt, "", "")
  MC(mCheckString, NET, DutCommunication, Ericsson.TM.TmCheckString, "", "")
  MC(mReadListInt, NET, DutCommunication, Ericsson.TM.TmReadListInt, "", "")
  MC(mMaskResult, NET, DutCommunication, Ericsson.TM.TmMaskResult, "", "")
  MC(mReadDouble, NET, DutCommunication, Ericsson.TM.TmReadDouble, "", "")
  MC(mSendString, NET, DutCommunication, Ericsson.TM.TmSendString, "", "")

  MC(TifInitialize, NET, TifBcRadio2, Ericsson.TM.TmTifInitialize, "", "")
  MC(TifReadString, NET, TifBcRadio2, Ericsson.TM.TmTifReadString, "", "")
  MC(TifDoAction, NET, TifBcRadio2, Ericsson.TM.TmTifDoAction, "", "")
  MC(Ping, NET, NetBoot, Ericsson.TM.TmPing, "", "")

  MC(mPSUControl, NET, DcDc2, Ericsson.TM.TmPSUControl, "", "")

  MC(ReadProductDataFromFile, NET, DutConfiguration, Ericsson.TM.TmReadProductDataFromFile, "", "")
  MC(SaveChildInfoToSystem, NET, DutConfiguration, Ericsson.TM.TmSaveChildInfoToSystem, "", "")
  MC(WriteProductDataFromFile, NET, DutConfiguration, Ericsson.TM.TmWriteProductDataFromFile, "", "")

  MC(SetCompConfigIdFromVendorId2, NET, DutConfiguration2, Ericsson.TM.TmSetCompConfigIdFromVendorId2, "", "")
  MC(WritePidWithMarketName2, NET, DutConfiguration2, Ericsson.TM.TmWritePidWithMarketName2, "", "")
  MC(WriteMacAddress2, NET, DutConfiguration2, Ericsson.TM.TmWriteMacAddress2, "", "")
  MC(TmEraseFlashArea, NET, DutConfiguration2, Ericsson.TM.TmEraseFlashArea, "", "")

  MC(DutConfiguration, NET, CommonRadio, Ericsson.TM.TmDutConfiguration, "", "")
  MC(DisableTransmitter, NET, CommonRadio, Ericsson.TM.TmDisableTransmitter, "", "")
  MC(EnableDutCommunicationStateCache, NET, CommonRadio, Ericsson.TM.TmEnableDutCommunicationStateCache, "", "")
  MC(DisableDutCommunicationStateCache, NET, CommonRadio, Ericsson.TM.TmDisableDutCommunicationStateCache, "", "")
  MC(ExerciseSwitches, NET, CommonRadio, Ericsson.TM.TmExerciseSwitches, "", "")
  MC(mSelectRfMuxPath, NET, CommonRadio, Ericsson.TM.TmSelectRfMuxPath, "", "")
  MC(EnableDisableCpriPort, NET, CommonRadio, Ericsson.TM.TmEnableDisableCpriPort, "", "")
  MC(TmSetupCpriRate, NET, CommonRadio, Ericsson.TM.TmSetupCpriRate, "", "")

  MC(SetOutputState, NET, DcDc2, Ericsson.TM.TmSetOutputState, "", "")
  MC(WaitForCurrent, NET, DcDc2, Ericsson.TM.TmWaitForCurrent, "", "")
  MC(UnderVoltage_48V_OK, NET, DcDc2, Ericsson.TM.TmUnderVoltage_48V_OK, "", "")
  MC(MeasureVoltages, NET, DcDc2, Ericsson.TM.TmMeasureVoltages, "", "")

  MC(ReportRfSwitchConfiguration, NET, TestHw, Ericsson.TM.TmReportRfSwitchConfiguration, "", "")

  MC(mDcBiasCalibration, NET, Digital3, Ericsson.TM.TmDcBiasCalibration, "", "")
  MC(mInternalAibResistance, NET, Digital3, Ericsson.TM.TmInternalAibResistance, "", "")
  MC(mExternalIoDownTest, NET, Digital3, Ericsson.TM.TmExternalIoDownTest, "", "")
  MC(RetCommunicationTest, NET, Digital3, Ericsson.TM.TmRetCommunicationTest, "", "")
  MC(ModemRxTest, NET, Digital3, Ericsson.TM.TmModemRxTest, "", "")
  MC(ModemTxTest, NET, Digital3, Ericsson.TM.TmModemTxTest, "", "")
  MC(mDiffValueCheck, NET, Digital3, Ericsson.TM.TmDiffValueCheck, "", "")
  MC(mBiasRetCheck, NET, Digital3, Ericsson.TM.TmBiasRetCheck, "", "")
  MC(mMeasureRetVcc, NET, Digital3, Ericsson.TM.TmMeasureRetVcc, "", "")
  MC(VerifyStartupSequence3, NET, Digital4, Ericsson.TM.TmVerifyStartupSequence3, "", "")
  MC(TmDelay_1, NET, Mmi2, Ericsson.TM.TmDelay, "", "")
  MC(mAbsoluteTemp2, NET, Digital4, Ericsson.TM.TmAbsoluteTemp2, "", "")
  MC(mRelativeTemp2, NET, Digital4, Ericsson.TM.TmRelativeTemp2, "", "")
  MC(mRetVccCalibration2, NET, Digital4, Ericsson.TM.TmRetVccCalibration2  , "", "")
  MC(AntennaBiasAndRetCheck, NET, Digital4, Ericsson.TM.TmAntennaBiasAndRetCheck  , "", "")
  MC(VoltageSupervisionCheck2, NET, Digital4, Ericsson.TM.TmVoltageSupervisionCheck2  , "", "")
  MC(CurrentSupervisionCheck2, NET, Digital4, Ericsson.TM.TmCurrentSupervisionCheck2  , "", "")
  MC(DiffVoltageCheck, NET, Digital4, Ericsson.TM.TmDiffVoltageCheck, "", "")
  MC(SfpModuleIdCheck , NET, Digital4, Ericsson.TM.TmSfpModuleIdCheck2 , "", "")
  MC(LnaSuperVision, NET, Digital4, Ericsson.TM.TmLnaSuperVision, "", "")
  MC(SfpMainPortTest2, NET, Digital4, Ericsson.TM.TmSfpMainPortTest2, "", "")

  MC(JesdLinkTest, NET, Digital3, Ericsson.TM.TmJesdLinkTest, "", "")

  MC(RetPortCurrentSensor, NET, Digital4, Ericsson.TM.TmRetPortCurrentSensor, "", "")
  MC(TmRicrStatus, NET, Digital4, Ericsson.TM.TmRicrStatus, "", "")

  MC(LoadFileWithFlashLoader, NET, FlashProgramming, Ericsson.TM.TmLoadFileWithFlashLoader, "", "")
  MC(ConvertFile, NET, FlashProgramming, Ericsson.TM.TmConvertFile, "", "")


  MC(mDelay, NET, Mmi2, Ericsson.TM.TmDelay, "", "")
  MC(mResetButtonCheck, NET, Mmi2, Ericsson.TM.TmResetButtonCheck4, "", "")
  MC(LEDTestAuto, NET, Mmi2, Ericsson.TM.TmLedTestAuto, "", "")

  MC(mCalibratePaVddAndBias2, NET, tmTxCalibration4, Ericsson.TM.TmCalibratePaVddAndBias2, "", "")
  MC(mChangePowerClass, NET, tmTxCalibration4, Ericsson.TM.TmChangePowerClass, "", "")
  MC(mTxIQDcOffsetCalibration, NET, tmTxCalibration4, Ericsson.TM.TmTxIQDcOffsetCalibration , "", "")
  MC(mTxVgaCalibration, NET, tmTxCalibration4, Ericsson.TM.TmTxVgaCalibration , "", "")
  MC(mTorStepAttCal, NET, tmTxCalibration4, Ericsson.TM.TmTorStepAttCal, "", "")
  MC(mTxFrequencyCalibration, NET, tmTxCalibration4, Ericsson.TM.TmTxFrequencyCalibration , "", "")
  MC(mAnalogeDohertyCal, NET, tmTxCalibration4, Ericsson.TM.TmAnalogeDohertyCal, "", "")
  MC(mTxIqStartValuesCalibration, NET, tmTxCalibration4, Ericsson.TM.TmTxIqStartValuesCalibration, "", "")
  MC(mTxImCalibration, NET, tmTxCalibration4, Ericsson.TM.TmTxImCalibration, "", "")
  MC(mFuEqualizerCal, NET, tmTxCalibration4, Ericsson.TM.TmFuEqualizerCal, "", "")
  MC(mCreateTxEqualizerFilterTaps, NET, tmTxCalibration4, Ericsson.TM.TmCreateTxEqualizerFilterTaps, "", "")
  MC(mRemoveTxEqualizerFilterTaps, NET, tmTxCalibration4, Ericsson.TM.TmRemoveTxEqualizerFilterTaps, "", "")
  MC(mCalculateTxDelay, NET, tmTxCalibration4, Ericsson.TM.TmCalculateTxDelay, "", "")
  MC(mTxDigitalVSWRCalculateS11, NET, tmTxCalibration4, Ericsson.TM.TmTxDigitalVSWRCalculateS11, "", "")
  MC(mTxDigitalVSWRCalibration, NET, tmTxCalibration4, Ericsson.TM.TmTxDigitalVSWRCalibration, "", "")
  MC(mClippingCalibration, NET, tmTxCalibration4, Ericsson.TM.TmClippingCalibration, "", "")

  MC(mPaBias, NET, tmTxPerformance4, Ericsson.TM.TmPaBias, "", "")
  MC(mTxPowerAndConsumptionMeas, NET, tmTxPerformance4, Ericsson.TM.TmTxPowerAndConsumptionMeas, "", "")
  MC(mTxSpectrumMeas, NET, tmTxPerformance4, Ericsson.TM.TmTxSpectrumMeas, "", "")
  MC(mTxIsolation, NET, tmTxPerformance4, Ericsson.TM.TmTxIsolationBetweenBranches, "", "")
  MC(mTxOriginOffset, NET, tmTxPerformance4, Ericsson.TM.TmTxOriginOffset, "", "")
  MC(mTxStatistics, NET, tmTxPerformance4, Ericsson.TM.TmTxStatistics, "", "")
  MC(mTxEvmUsingRefFile, NET, tmTxPerformance4, Ericsson.TM.TmTxEvmUsingRefFile, "", "")
  MC(mTxEvm, NET, tmTxPerformance4, Ericsson.TM.TmTxEvm, "", "")
  MC(mTxSpuriousEmission, NET, tmTxPerformance4, Ericsson.TM.TmTxSpuriousEmission, "", "")
  MC(mTxDigitalVSWR, NET, tmTxPerformance4, Ericsson.TM.TmTxDigitalVSWR, "", "")
  MC(mTxIntermodulation, NET, tmTxPerformance4, Ericsson.TM.TmTxIntermodulation, "", "")
  MC(mTxSpectrumDueToMod, NET, tmTxPerformance4, Ericsson.TM.TmTxSpectrumDueToMod, "", "")
  MC(mTxSpectrumDueToSwitching, NET, tmTxPerformance4, Ericsson.TM.TmTxSpectrumDueToSwitching, "", "")

  MC(mTorNoiseFloor, NET, tmTorPerformance4, Ericsson.TM.TmTorNoiseFloor, "", "")


  MC(mRxRfAttCal2, NET, tmRxCalibration4, Ericsson.TM.TmRxRfAttCal2, "", "")
  MC(mRxGainCal2, NET, tmRxCalibration4, Ericsson.TM.TmRxIfGainCal, "", "")
  MC(mRxFrontendSetGain, NET, tmRxCalibration4, Ericsson.TM.TmRxFrontendSetGain, "", "")
  MC(mRxFrontendCal4, NET, tmRxCalibration4, Ericsson.TM.TmRxFrontendCal4, "", "")
  MC(mRxIfFreqCal, NET, tmRxCalibration4, Ericsson.TM.TmRxIfFreqCal, "", "")
  MC(mRxAAgcCal2, NET, tmRxCalibration4, Ericsson.TM.TmRxAAGCCal2, "", "")
  MC(mRxAAgcPhaseAndDelayCal, NET, tmRxCalibration4, Ericsson.TM.TmRxAAGCPhaseAndDelayCal, "", "")
  MC(mCreateRxEqualizerFilterTaps, NET, tmRxCalibration4, Ericsson.TM.TmCreateRxEqualizerFilterTaps, "", "")
  MC(mRemoveRxEqualizerFilterTaps, NET, tmRxCalibration4, Ericsson.TM.TmRemoveRxEqualizerFilterTaps, "", "")

  MC(mRxGain, NET, tmRxPerformance4, Ericsson.TM.TmRxGain, "", "")
  MC(mRxNoiseFigure, NET, tmRxPerformance4, Ericsson.TM.TmRxNoiseFigure, "", "")
  MC(mRxEvm, NET, tmRxPerformance4, Ericsson.TM.TmRxEvm, "", "")
  MC(mRxBlocking, NET, tmRxPerformance4, Ericsson.TM.TmRxBlocking, "", "")
  MC(mRxIM2Gen, NET, tmRxPerformance4, Ericsson.TM.TmRxIM2Gen, "", "")
  MC(mInputReturnLoss, NET, tmRxPerformance4, Ericsson.TM.TmInputReturnLoss, "", "")
  MC(mRxVgaDynamicRangeCheck, NET, tmRxPerformance4, Ericsson.TM.TmRxVgaDynamicRangeCheck, "", "")

  MC(TmCheckStopCondition, NET, tmMaintenance, Ericsson.TM.TmCheckStopCondition, "", "")
  MC(TmDisplayCounters, NET, tmMaintenance, Ericsson.TM.TmDisplayCounters, "", "")
  MC(TmIncreaseAllAdapters, NET, tmMaintenance, Ericsson.TM.TmIncreaseAllAdapters, "", "")
  MC(mAntennaPhaseCalibration, NET, tmTxCalibration4, Ericsson.TM.TmAntennaPhaseCalibration, "", "")
  MC(TmCreateTPFComPort, NET, Digital4, Ericsson.TM.CreateTPFComPort, "", "")
  MC(TmDestroyTPFComPort, NET, Digital4, Ericsson.TM.DestroyTPFComPort, "", "")

  MC(mSaveAPCData, NET, tmTxCalibration4, Ericsson.TM.TmSaveAPCData, "", "")

  MC(DCFirmwareload, NET, tmFlash, Ericsson.TM.TmDCFirmwareload, "", "")
  MC(mSetCompConfigIdFromMountedChildProduct, NET, DutConfiguration2, Ericsson.TM.TmSetCompConfigIdFromMountedChildProduct, "", "")
  MC(mBlockTPStatementMargin, NET, TestFlowControl, Ericsson.TM.TmBlockTpStatementMargin, "", "")
  MC(EventAbort, NET, tmTestUtilities, Ericsson.TM.TestUtilities.EventAbort, "", "")
END_MCS

DEFINE DUTS BEGIN
  DUT(DUT0, 1)
END_DUTS

DEFINE ACTIONS BEGIN
  PRIVATE(TP_LOAD, EVENT, "No description")
  PRIVATE(TP_REMOVE, EVENT, "No description")
  PRIVATE(TP_ACTIVATE, EVENT, "No description")
  PRIVATE(TP_DEACTIVATE, EVENT, "No description")
  PRIVATE(TP_METHOD_START, EVENT, "No description")
  PRIVATE(TP_METHOD_END, EVENT, "No description")
  PRIVATE(TP_ABORT, EVENT, "No description")
  PUBLIC(MAINT, GROUP, "Display and Check Maintenance")
  PUBLIC(RFMUX_INIT, GROUP, "Set RF MUX to INIT path")
  PUBLIC(RETURNLOSS, GROUP, "Input Return Loss")
  PUBLIC(TXOFF_APP, GROUP, "Switch off transmitter")
  PUBLIC(TXOFF, GROUP, "Switch off transmitter")
  PUBLIC(STATECACHE_ENABLE, GROUP, "Enable RU state cache")
  PUBLIC(STATECACHE_DISABLE, GROUP, "Disable DUT state cache")
  PUBLIC(STATECACHE_ENABLE_PIS, GROUP, "Enable RU state cache Pis")
  PUBLIC(STATECACHE_DISABLE_PIS, GROUP, "Disable DUT state cache Pis")
  PUBLIC(TESTHW_INIT, GROUP, "Initialize Test HW")
  PUBLIC(INIT_BOOT, GROUP, "Configure TIF for DUT booting")
  PUBLIC(NETBOOT_SETUP, GROUP, "Setup server and control pins")
  PUBLIC(NETBOOT_BOOT, GROUP, "Boot and start ETSW")
  PUBLIC(NETBOOT_REBOOT, GROUP, "ReBoot and ReStart ETSW")
  PUBLIC(REDO_NTEBOOT_BOOT, GROUP, "ReBoot and ReStart ETSW")
  PUBLIC(DCDC, GROUP, "DC/DC measurements")
  PUBLIC(DIGITAL, GROUP, "Digital and DC/DC measurements")
  PUBLIC(DIGITAL_2, GROUP, "Digital and DC/DC measurements")
  PUBLIC(VOLTAGE_SUPERVISION, GROUP, "Voltage and current supervision")
  PUBLIC(DC_N48V_OK, GROUP, "Check DC_N48V_OK and DC voltages @ -46V and -35V")
  PUBLIC(ReloadDCFW, GROUP, "Reload DCFW")
  PUBLIC(LED, GROUP, "LED Check ")
  PUBLIC(PSU35.0, GROUP, "Set PSU to -35.0V")
  PUBLIC(PSU39.0, GROUP, "Set PSU to -39.0V")
  PUBLIC(PSU46.0, GROUP, "Set PSU to -46.0V")
  PUBLIC(PSU48, GROUP, "Set PSU to -48V")
  PUBLIC(PSU55, GROUP, "Set PSU to -55V")
  PUBLIC(DCDC_PNOM, GROUP, "DC/DC tests at Pnom")
  PUBLIC(MODEM, GROUP, "Modem Check")
  PUBLIC(1.13.1, GROUP, "RET Communication Check (RS485)")
  PUBLIC(1.15, GROUP, "Fan Interface Check")
  PUBLIC(PROD_DB_UPDATE, GROUP, "Update HWDB according to 152 12- document")
  PUBLIC(BP_UPDATE, GROUP, "Update Board Parameters according to 152 12- document")
  PUBLIC(SFP_SIGNALS, GROUP, "SFP Signals")
  PUBLIC(XENON, GROUP, "Xenon Init - probe mode")
  PUBLIC(INIT, GROUP, "DUT Init")
  PUBLIC(RXCAL, GROUP, "RX Calibration")
  PUBLIC(RXCI, GROUP, "Init RX Compensation")
  PUBLIC(RXPERF, GROUP, "RX Performance")
  PUBLIC(JESDLINK, GROUP, "SerDes link quality check")
  PUBLIC(PAWARMUP, GROUP, "Warmup PA prior to calibration")
  PUBLIC(PACAL_FINALLY, GROUP, "PACAL_FINALLY")
  PUBLIC(TELNET_CLEAR, GROUP, "Clear telnet sessions")
  PUBLIC(TXCAL, GROUP, "TX Calibration")
  PUBLIC(TXCAL_1, GROUP, "TX Calibration, power class 1")
  PUBLIC(TXCAL_2, GROUP, "TX Calibration, power class 2")
  PUBLIC(TXCAL_3, GROUP, "TX Calibration, power class 3")
  PUBLIC(TXCAL_4, GROUP, "TX Calibration, power class 4")
  PUBLIC(TXCAL_1.1, GROUP, "TX Psat, power class 1")
  PUBLIC(TXCAL_2.1, GROUP, "TX Psat, power class 2")
  PUBLIC(TXCAL_3.1, GROUP, "TX Psat, power class 3")
  PUBLIC(TXCAL_4.1, GROUP, "TX Psat, power class 4")
  PUBLIC(VSWR_CALCULATE_S11, GROUP, "TX Calculate S11 for DVSWR")
  PUBLIC(CLIPPING_CAL, GROUP, "TX Clipping Calibration")
  PUBLIC(2.26.1, GROUP, "TX Analog Doherty Calibration, power class 1")
  PUBLIC(2.26.2, GROUP, "TX Analog Doherty Calibration, power class 2")
  PUBLIC(2.26.3, GROUP, "TX Analog Doherty Calibration, power class 3")
  PUBLIC(2.26.4, GROUP, "TX Analog Doherty Calibration, power class 4")
  PUBLIC(TXPERF, GROUP, "TX Performance")
  PUBLIC(TXPERF_1, GROUP, "TX Performance, power class 1")
  PUBLIC(LTE5_L_1, GROUP, "LTE5, L, power class 1")
  PUBLIC(LTE5_M_1, GROUP, "LTE5, M, power class 1")
  PUBLIC(LTE5_H_1, GROUP, "LTE5, H, power class 1")
  PUBLIC(WCDMA_2C50_M_1, GROUP, "WCDMA_2C50_1, M, power class 1")
  PUBLIC(LTE5_2C10_L_1, GROUP, "LTE5,2C10 L, power class 1")
  PUBLIC(LTE5_2C10_H_1, GROUP, "LTE5,2C10 H, power class 1")
  PUBLIC(LTE5_2C20_L_1, GROUP, "LTE5,2C20 L, power class 1")
  PUBLIC(LTE5_2C20_H_1, GROUP, "LTE5,2C20 H, power class 1")
  PUBLIC(LTE5_2C30_L_1, GROUP, "LTE5,2C30 L, power class 1")
  PUBLIC(LTE5_2C30_M_1, GROUP, "LTE5,2C30 M, power class 1")
  PUBLIC(LTE5_2C30_H_1, GROUP, "LTE5,2C30 H, power class 1")
  PUBLIC(LTE5_2C35_L_1, GROUP, "LTE5,2C35 L, power class 1")
  PUBLIC(LTE5_2C35_M_1, GROUP, "LTE5,2C35 M, power class 1")
  PUBLIC(LTE5_2C35_H_1, GROUP, "LTE5,2C35 H, power class 1")
  PUBLIC(LTE5_2C45_L_1, GROUP, "LTE5,2C45 L, power class 1")
  PUBLIC(LTE5_2C45_H_1, GROUP, "LTE5,2C45 H, power class 1")
  PUBLIC(LTE5_2C65_M_1, GROUP, "LTE5,2C65 M, power class 1")
  PUBLIC(LTE5_2C85_M_1, GROUP, "LTE5,2C85 M, power class 1")
  PUBLIC(LTE10_L_1, GROUP, "LTE10, L, power class 1")
  PUBLIC(LTE10_H_1, GROUP, "LTE10, H, power class 1")
  PUBLIC(LTE15_L_1, GROUP, "LTE15, L, power class 1")
  PUBLIC(LTE15_M_1, GROUP, "LTE15, M, power class 1")
  PUBLIC(LTE15_H_1, GROUP, "LTE15, H, power class 1")
  PUBLIC(LTE20_L_1, GROUP, "LTE20, L, power class 1")
  PUBLIC(LTE20_M_1, GROUP, "LTE20, M, power class 1")
  PUBLIC(LTE20_H_1, GROUP, "LTE20, H, power class 1")
  PUBLIC(GSM_L_1, GROUP, "GSM, C1 L, power class 1")
  PUBLIC(GSM_H_1, GROUP, "GSM, C1 H, power class 1")
  PUBLIC(GSM_4C1.4_L_1, GROUP, "GSM, C4 1.4 L, power class 1")
  PUBLIC(GSM_4C1.4_H_1, GROUP, "GSM, C4 1.4 H, power class 1")
  PUBLIC(GSM_2C20_M_1, GROUP, "GSM, 2C20 M, power class 1")
  PUBLIC(GSM_4C18.6_L_1, GROUP, "GSM, 4C18.6 L, power class 1")
  PUBLIC(GSM_4C18.6_M_1, GROUP, "GSM, 4C18.6 M, power class 1")
  PUBLIC(GSM_4C18.6_H_1, GROUP, "GSM, 4C18.6 H, power class 1")
  PUBLIC(GSM_4C40_L_1, GROUP, "GSM, 4C40 L, power class 1")
  PUBLIC(GSM_4C40_H_1, GROUP, "GSM, 4C40 H, power class 1")
  PUBLIC(WCDMA_L_1, GROUP, "WCDMA, L, power class 1")
  PUBLIC(WCDMA_M_1, GROUP, "WCDMA, M, power class 1")
  PUBLIC(WCDMA_H_1, GROUP, "WCDMA, H, power class 1")
  PUBLIC(LTE5_L_2, GROUP, "LTE5, L, power class 2")
  PUBLIC(LTE5_M_2, GROUP, "LTE5, M, power class 2")
  PUBLIC(LTE5_H_2, GROUP, "LTE5, H, power class 2")
  PUBLIC(LTE5_2C10_L_2, GROUP, "LTE5,2C10 L, power class 2")
  PUBLIC(LTE5_2C10_H_2, GROUP, "LTE5,2C10 H, power class 2")
  PUBLIC(LTE5_2C20_L_2, GROUP, "LTE5,2C20 L, power class 2")
  PUBLIC(LTE5_2C20_H_2, GROUP, "LTE5,2C20 H, power class 2")
  PUBLIC(LTE5_2C30_L_2, GROUP, "LTE5,2C30 L, power class 2")
  PUBLIC(LTE5_2C30_M_2, GROUP, "LTE5,2C30 L, power class 2")
  PUBLIC(LTE5_2C30_H_2, GROUP, "LTE5,2C30 H, power class 2")
  PUBLIC(LTE5_2C35_L_2, GROUP, "LTE5,2C35 L, power class 2")
  PUBLIC(LTE5_2C35_M_2, GROUP, "LTE5,2C35 M, power class 2")
  PUBLIC(LTE5_2C35_H_2, GROUP, "LTE5,2C35 H, power class 2")
  PUBLIC(LTE5_2C45_L_2, GROUP, "LTE5,2C45 L, power class 2")
  PUBLIC(LTE5_2C45_H_2, GROUP, "LTE5,2C45 H, power class 2")
  PUBLIC(LTE5_2C65_M_2, GROUP, "LTE5,2C65 M, power class 2")
  PUBLIC(LTE5_2C85_M_2, GROUP, "LTE5,2C85 M, power class 2")
  PUBLIC(LTE10_L_2, GROUP, "LTE10, L, power class 2")
  PUBLIC(LTE10_H_2, GROUP, "LTE10, H, power class 2")
  PUBLIC(LTE15_L_2, GROUP, "LTE15, L, power class 2")
  PUBLIC(LTE15_M_2, GROUP, "LTE15, M, power class 2")
  PUBLIC(LTE15_H_2, GROUP, "LTE15, H, power class 2")
  PUBLIC(LTE20_L_2, GROUP, "LTE20, L, power class 2")
  PUBLIC(LTE20_M_2, GROUP, "LTE20, M, power class 2")
  PUBLIC(LTE20_H_2, GROUP, "LTE20, H, power class 2")
  PUBLIC(TXPERF_2, GROUP, "TX Performance, power class 2")
  PUBLIC(LTE1.4_L_2, GROUP, "LTE1.4, L, power class 2")
  PUBLIC(LTE1.4_H_2, GROUP, "LTE1.4, H, power class 2")
  PUBLIC(GSM_4C18.6_L_2, GROUP, "GSM, 4C18.6 L, power class 2")
  PUBLIC(GSM_4C18.6_M_2, GROUP, "GSM, 4C18.6 M, power class 2")
  PUBLIC(GSM_4C18.6_H_2, GROUP, "GSM, 4C18.6 H, power class 2")
  PUBLIC(GSM_4C40_L_2, GROUP, "GSM, 4C40 L, power class 2")
  PUBLIC(GSM_4C40_H_2, GROUP, "GSM, 4C40 H, power class 2")
  PUBLIC(TXPERF_3, GROUP, "TX Performance, power class 3")
  PUBLIC(LTE5_L_3, GROUP, "LTE5, L, power class 3")
  PUBLIC(LTE5_M_3, GROUP, "LTE5, M, power class 3")
  PUBLIC(LTE5_H_3, GROUP, "LTE5, H, power class 3")
  PUBLIC(LTE5_2C10_L_3, GROUP, "LTE5,2C10 L, power class 3")
  PUBLIC(LTE5_2C10_H_3, GROUP, "LTE5,2C10 H, power class 3")
  PUBLIC(LTE5_2C20_L_3, GROUP, "LTE5,2C20 L, power class 3")
  PUBLIC(LTE5_2C20_H_3, GROUP, "LTE5,2C20 H, power class 3")
  PUBLIC(LTE5_2C30_L_3, GROUP, "LTE5,2C30 L, power class 3")
  PUBLIC(LTE5_2C30_M_3, GROUP, "LTE5,2C30 L, power class 3")
  PUBLIC(LTE5_2C30_H_3, GROUP, "LTE5,2C30 H, power class 3")
  PUBLIC(LTE5_2C35_L_3, GROUP, "LTE5,2C35 L, power class 3")
  PUBLIC(LTE5_2C35_M_3, GROUP, "LTE5,2C35 M, power class 3")
  PUBLIC(LTE5_2C35_H_3, GROUP, "LTE5,2C35 H, power class 3")
  PUBLIC(LTE5_2C45_L_3, GROUP, "LTE5,2C45 L, power class 3")
  PUBLIC(LTE5_2C45_H_3, GROUP, "LTE5,2C45 H, power class 3")
  PUBLIC(LTE5_2C65_M_3, GROUP, "LTE5,2C65 M, power class 3")
  PUBLIC(LTE5_2C85_M_3, GROUP, "LTE5,2C85 M, power class 3")
  PUBLIC(LTE10_L_3, GROUP, "LTE10, L, power class 3")
  PUBLIC(LTE10_H_3, GROUP, "LTE10, H, power class 3")
  PUBLIC(LTE15_L_3, GROUP, "LTE15, L, power class 3")
  PUBLIC(LTE15_M_3, GROUP, "LTE15, M, power class 3")
  PUBLIC(LTE15_H_3, GROUP, "LTE15, H, power class 3")
  PUBLIC(LTE20_L_3, GROUP, "LTE20, L, power class 3")
  PUBLIC(LTE20_M_3, GROUP, "LTE20, M, power class 3")
  PUBLIC(LTE20_H_3, GROUP, "LTE20, H, power class 3")
  PUBLIC(LTE1.4_L_3, GROUP, "LTE1.4, L, power class 3")
  PUBLIC(LTE1.4_H_3, GROUP, "LTE1.4, H, power class 3")
  PUBLIC(GSM_4C18.6_L_3, GROUP, "GSM, 4C18.6 L, power class 3")
  PUBLIC(GSM_4C18.6_M_3, GROUP, "GSM, 4C18.6 M, power class 3")
  PUBLIC(GSM_4C18.6_H_3, GROUP, "GSM, 4C18.6 H, power class 3")
  PUBLIC(GSM_4C40_L_3, GROUP, "GSM, 4C40 L, power class 3")
  PUBLIC(GSM_4C40_H_3, GROUP, "GSM, 4C40 H, power class 3")
  PUBLIC(TXPERF_4, GROUP, "TX Performance, power class 4")
  PUBLIC(LTE5_L_4, GROUP, "LTE5, L, power class 4")
  PUBLIC(LTE5_M_4, GROUP, "LTE5, M, power class 4")
  PUBLIC(LTE5_H_4, GROUP, "LTE5, H, power class 4")
  PUBLIC(LTE5_2C30_L_4, GROUP, "LTE5,2C30 L, power class 4")
  PUBLIC(LTE5_2C30_M_4, GROUP, "LTE5,2C30 M, power class 4")
  PUBLIC(LTE5_2C30_H_4, GROUP, "LTE5,2C30 H, power class 4")
  PUBLIC(LTE5_2C35_L_4, GROUP, "LTE5,2C35 L, power class 4")
  PUBLIC(LTE5_2C35_M_4, GROUP, "LTE5,2C35 M, power class 4")
  PUBLIC(LTE5_2C35_H_4, GROUP, "LTE5,2C35 H, power class 4")
  PUBLIC(LTE5_2C45_L_4, GROUP, "LTE5,2C45 L, power class 4")
  PUBLIC(LTE5_2C45_H_4, GROUP, "LTE5,2C45 H, power class 4")
  PUBLIC(LTE5_2C65_M_4, GROUP, "LTE5,2C65 M, power class 4")
  PUBLIC(LTE5_2C85_M_4, GROUP, "LTE5,2C85 M, power class 4")
  PUBLIC(LTE10_L_4, GROUP, "LTE10, L, power class 4")
  PUBLIC(LTE10_H_4, GROUP, "LTE10, H, power class 4")
  PUBLIC(LTE15_L_4, GROUP, "LTE15, L, power class 4")
  PUBLIC(LTE15_M_4, GROUP, "LTE15, M, power class 4")
  PUBLIC(LTE15_H_4, GROUP, "LTE15, H, power class 4")
  PUBLIC(LTE20_L_4, GROUP, "LTE20, L, power class 4")
  PUBLIC(LTE20_M_4, GROUP, "LTE20, M, power class 4")
  PUBLIC(LTE20_H_4, GROUP, "LTE20, H, power class 4")
  PUBLIC(LTE1.4_L_4, GROUP, "LTE1.4, L, power class 4")
  PUBLIC(LTE1.4_H_4, GROUP, "LTE1.4, H, power class 4")
  PUBLIC(GSM_4C18.6_L_4, GROUP, "GSM, 4C18.6 L, power class 4")
  PUBLIC(GSM_4C18.6_M_4, GROUP, "GSM, 4C18.6 M, power class 4")
  PUBLIC(GSM_4C18.6_H_4, GROUP, "GSM, 4C18.6 H, power class 4")
  PUBLIC(GSM_4C40_L_4, GROUP, "GSM, 4C40 L, power class 4")
  PUBLIC(GSM_4C40_H_4, GROUP, "GSM, 4C40 H, power class 4")
  PUBLIC(LOAD_SW_1, GROUP, "Load SW to flash")
  PUBLIC(LOAD_SW_2, GROUP, "Load SW to flash")
  PUBLIC(PRE_AUBOOT_STARTUP, GROUP, "Pre AUBoot startup sequence")
  PUBLIC(HWLOG_ERASE, GROUP, "Erase HW Log")
  PUBLIC(AUBOOT_STARTUP, GROUP, "Verify AUBoot startup sequence")
  PUBLIC(APPSW_TEST, GROUP, "Start APP SW/PIS and run tests")
  PUBLIC(UNITTEST, GROUP, "Unit Test")
  PUBLIC(DEBUG, GROUP, "Debug Actions")
  PUBLIC(HICURRENT, GROUP, "Setup Dut Power, high current limit")
  PUBLIC(HICURRENTPAWARM, GROUP, "Setup Dut Power, high current limit")
  PUBLIC(PADB_ROLLBACK, GROUP, "Upload PA DB from memory")
  PUBLIC(PERF_INIT, GROUP, "Init test & DUT to run performance tests")
  PUBLIC(CORE_Voltage_Cal,GROUP,"CoreVoltage Calibration")
  PUBLIC(INIT_PRE,GROUP,"DUT Init Under Debug")
  PUBLIC(AP_CHECK, GROUP, "Antenna Phase Check")
  PUBLIC(AP_CAL, GROUP, "Antenna Phase Calibration")
  PUBLIC(INIT_UNCHECK, GROUP, "DUT Init without check ricr status")
  PUBLIC(DCFirm_Load,GROUP,"DC Firmware Load")
  PUBLIC(IfNGTIF1, GROUP, "NGTIF case 1")
  PUBLIC(Setloglev7,GROUP,"Set sysloglev 7")
  PUBLIC(Setloglev0,GROUP,"Set sysloglev 0")
  PUBLIC(TX_VGA_EXTRA_DELAY_ON,GROUP,"TX_VGA_EXTRA_DELAY_ON")
  PUBLIC(TX_VGA_EXTRA_DELAY_OFF,GROUP,"TX_VGA_EXTRA_DELAY_OFF")
END_ACTIONS

EVENT(TP_LOAD) BEGIN
  RUN(TPLOAD.01, "Kill unwanted processes", KillProcesses, DUT0:TPLOAD.01, , )
  RUN(TPLOAD.02, "Register Drivers", Registration, DUT0:TPLOAD.02, , )
  RUN(TPLOAD.03, "Load Instrument Drivers", RcmInitialize, DUT0:TPLOAD.03, , )

  RUN(TPLOAD.07, "Initialize TIF", TifInitialize, DUT0:TPLOAD.07, , )
  RUN(TPLOAD.08, "Check maintenance STOP", TmCheckStopCondition, DUT0:MARU:MARU.06, , )
  RUN(TPLOAD.09, "Reset picture viewer dialog info", PictureViewerInfo, DUT0:TPLOAD.09, , )
  RUN(TPLOAD.10, "EnableTextOutWithThreadId", EnableTextOutWithThreadId, , TEXTOUT_THREAD_ID_CSHARP_STYLE_I:1;LOGTYPE_TM_I:0;LOGTYPE_INSTR_I:0;LOGTYPE_DUT_I:0;LOGTYPE_OTHER_I:0;LOGTYPE_CUST_I:0;, )
  RUN(TPLOAD.11, "EnableLogMessagesInTextOut", EnableLogMessagesInTextOut, , LOGTYPE_TM_I:0;LOGTYPE_INSTR_I:0;LOGTYPE_DUT_I:0;LOGTYPE_OTHER_I:0;LOGTYPE_CUST_I:0;, )
  RUN(TPLOAD.12, "Init NetworkListener", InitNetworkListener, DUT0:TPLOAD.12, , )
  RUN(TIFLOAD.01, "TIF check (ping)", Ping, DUT0:TIFLOAD.01, , )
END_EVENT

EVENT(TP_REMOVE) BEGIN
  RUN(TPR.01, "Disconnect RFDSP", RcmParallelTasks, DUT0:TPR:TPR.01, , )
  RUN(TPR.02.1, "Disable USB UART1", TifDoAction, DUT0:TPR:TPR.02.1, , )
  RUN(TPR.02.2, "Disable USB UART2", TifDoAction, DUT0:TPR:TPR.02.2, , )
  RUN(TPR.02.3, "Disable USB UART3", TifDoAction, DUT0:TPR:TPR.02.3, , )
  RUN(TPR.02.4, "Disable USB UART4", TifDoAction, DUT0:TPR:TPR.02.4, , )
  RUN(TPR.03, "Turn off TIF internal power", TifDoAction, DUT0:TPR:TPR.03, , )
  RUN(TPR.04, "Release Instrument Drivers", RcmRelease, , DELAYAFTERRELEASE_I:0;, )
  RUN(TPR.05, "Terminate NetBoot Server", TerminateServer, DUT0:NETBS.01, , )
  RUN(TPR.06, "Exit/Kill Network Listener", ExitNetworkListener, DUT0:TPR:TPR.06, , )
  RUN(TPLOAD.01, "Kill unwanted processes", KillProcesses, DUT0:TPLOAD.01, , )
END_EVENT

EVENT(TP_ACTIVATE) BEGIN
  RUN(TPA.01, "EnableLoggingToFile", EnableLoggingToFile, , LOG_FOLDER_PATH_S:"C:\\Users\\Public\\Teststation\\Blob";ADD_UNIQUE_FOLDER_NAME_I:0;LOGTYPE_TM_I:0;LOGTYPE_INSTR_I:0;LOGTYPE_DUT_I:1;LOGTYPE_OTHER_I:0;LOGTYPE_CUST_I:0;, )
  RUN(TPA.02, "PrintTestCaseInformation", PrintTestCaseInformation, DUT0:TPA.02, , )
  RUN(TPA.03, "PrintTestStationInformation", PrintTestStationInformation, DUT0:TPA.03, , )
  RUN(TPA.04, "Start time meas", EventTpActivateTimeMeas, , ALWAYS_REPORT_TIME_I:;, )
  RUN(TPA.05, "Init CPK based sample test", InitializeSampleBasedTests, DUT0:CPKINIT, , )
  RUN(TPA.06, "Init Dynamic Test Flow", BlockTPStatement, DUT0:TPA.06, , )
  RUN(TPA.07, "Report if first time", ReportFirstTime, DUT0:TPA.07, , )
  RUN(TPA.08, "Start DUT fan", TifDoAction, DUT0:TPA.08, , )
  RUN(TPA.09, "Set Communication Protocol ETSW", CommunicationProtocol, DUT0:COMETSW , , )
  RUN(TPA.10, "Load product data file tmAum", ReadProductDataFromFile, DUT0:TPA.10, , )
  RUN(TPA.12, "Open RS232 Port Modem", OpenPort, DUT0:TPA.12, , )
  RUN(TPA.13, "Set Baudrate", SetBaudRateInPc, DUT0:TPA.13, , )
  RUN(TPA.14, "Read DUT HW configuration", DutConfiguration, DUT0:DUTCONF, , )
  RUN(IRFSW, "Initialize RF switch", ReportRfSwitchConfiguration, DUT0:IRFSW, , )
  RUN(BSTF, " RF front-end switchbox choose", mBlockTPStatementMargin, DUT0:BSTF, , )
END_EVENT

EVENT(TP_DEACTIVATE) BEGIN

  RUN(TPDEA.02, "Switch Off Dut Power", SetOutputState, DUT0:TPDEA.02, , )
  DO(STATECACHE_DISABLE)
  RUN(RUMATPF21, "Delete TPF emulated COM port over CPRI", TmDestroyTPFComPort, DUT0:RUMATPF2 , , )
  RUN(TPDEA.03, "Close RS232 Port", ClosePort, DUT0:TPDEA.03, , )
  RUN(TPDEA.04, "Close RS232 Port Modem", ClosePort, DUT0:TPDEA.04, , )
  RUN(TPDEA.05, "Close DUT Telnet Port", ClosePort, DUT0:TPDEA.05, , )
  RUN(TPDEA.06, "Stop DUT fan", TifDoAction, DUT0:TPDEA.06, , )
  RUN(TPDEA.07, "Save total time Sec", SaveTotalTime, DUT0:TIME, , )
  RUN(TPDEA.08, "Picture viewer dialog info", PictureViewerInfo, DUT0:TPDEA.09, , )
  RUN(TPDEA.09, "Check maintenance STOP", TmCheckStopCondition, DUT0:MARU:MARU.06, , )
  RUN(TPDEA.10, "Save test time to file", DumpTimeListToFile, DUT0:TIME2, , )
  RUN(TPDEA.11, "Save test time reports", SaveTimeListTime, DUT0:TIME2, , )
  RUN(TPDEA.12, "Disable logging to file", DisableLoggingToFile, , , )
  RUN(TPDEA.13, "DisableLogMessagesInTextOut", DisableLogMessagesInTextOut, , , )
  RUN(TPDEA.14, "StoreBlob", StoreBlob, DUT0:TPDEA.13, , )
  RUN(TPDEA.15, "TM Virtual Memory Usage", VirtualMemoryUsage, DUT0:VMEM, , )
  RUN(TPDEA.16, "Memory usage", MemoryUsage, DUT0:MMU, , )
  END_EVENT

EVENT(TP_METHOD_START) BEGIN
  RUN(TPMS.01, "ComputerTime", PrintComputerTime, , , )
  RUN(TPMS.02, "Start Time Measure", EventMethodStartTimeMeas, , , )
END_EVENT

EVENT(TP_METHOD_END) BEGIN
  RUN(TPME.01, "Set MP Id", PrintTestMethodSeparator , , , )
  RUN(TPME.02, "Measure Total Time", EventMethodEndTimeMeasTotalTime, , , )
END_EVENT

EVENT(TP_ABORT) BEGIN
  RUN(EAB1, "Abort event", EventAbort, DUT0:EAB2, , )
END_EVENT

IF(IfNGTIF1) BEGIN
IF_CONDITION(MP_VALUE;INTEGER;DUT0:TIFLOAD.01:TIFLOAD.01.01;,NOT_EQUAL,LITERAL;INTEGER;1;)
THEN
  RUN(NG_INIT_BOOT.05, "Set WATCHDOG_DISABLE High", VerifyValue, DUT0:TIFC:TIFC.12.1, , )
  RUN(NG_INIT_BOOT.06, "Set JTAG_ENABLE High", VerifyValue, DUT0:TIFC:TIFC.13.1, , )
  RUN(NG_INIT_BOOT.07, "Enable 125MHz Ethernet Clock", VerifyValue, DUT0:TIFC:TIFC.14.1, , )
ELSE
  RUN(INIT_BOOT.05, "Set WATCHDOG_DISABLE High", TifDoAction, DUT0:TIFC:TIFC.12, , )
  RUN(INIT_BOOT.06, "Set JTAG_ENABLE High", TifDoAction, DUT0:TIFC:TIFC.13, , )
  RUN(INIT_BOOT.07, "Enable 125MHz Ethernet Clock", TifDoAction, DUT0:TIFC:TIFC.14, , )
END_IF

GROUP(MAINT) BEGIN
  RUN(MAINT.01, "Increase All Adapters", TmIncreaseAllAdapters, DUT0:MARU:MARU.01, , )
  RUN(MAINT.02, "Display Maintenance Counts", TmDisplayCounters, DUT0:MARU:MARU.02, , )
END_GROUP

GROUP(STATECACHE_ENABLE) BEGIN
  RUN(SCENABLE, "Enable DUT communication state cache", EnableDutCommunicationStateCache, DUT0:SCENABLE, , )
END_GROUP

GROUP(STATECACHE_DISABLE) BEGIN
  RUN(SCDISABLE, "Disable DUT communication state cache", DisableDutCommunicationStateCache, DUT0:SCDISABLE, , )
END_GROUP

GROUP(STATECACHE_ENABLE_PIS) BEGIN
  RUN(SCENABLEP, "Enable DUT communication state cache Pis", EnableDutCommunicationStateCache, DUT0:SCENABLEP, , )
END_GROUP

GROUP(STATECACHE_DISABLE_PIS) BEGIN
  RUN(SCDISABLEP, "Disable DUT communication state cache Pis", DisableDutCommunicationStateCache, DUT0:SCDISABLEP, , )
END_GROUP

GROUP(RETURNLOSS) BEGIN
  RUN(3.34, "TX InputReturnLoss", mInputReturnLoss, DUT0:3.34, TS_BLOCK:3.34;TS_AUTOREPEAT:2;, )
  RUN(3.65, "RX InputReturnLoss", mInputReturnLoss, DUT0:3.65, TS_BLOCK:3.65;TS_AUTOREPEAT:2;, )
END_GROUP

GROUP(TXOFF_APP) BEGIN
  RUN(TXOFF_APP, "Switch Off TX", DisableTransmitter, DUT0:TXOFF_APP, , )
END_GROUP

GROUP(TXOFF) BEGIN
  RUN(TXOFF, "Switch Off TX", DisableTransmitter, DUT0:TXOFF, , )
END_GROUP

GROUP(ReloadDCFW) BEGIN
  RUN(PSUC.01, "Switch Off DUT Power - PSU", SetOutputState, DUT0:PSUC:PSUC.01, , )
  RUN(1.01.01, "Setup Dut Power -48V", WaitForCurrent, DUT0:1.01.1.L:1.01.01.L, TS_AUTOREPEAT:1;, )
  RUN(DCFWLoad,"DCFirmWareLoad", DCFirmwareload, DUT0:DCFWLoad2,,)
END_GROUP

GROUP(TESTHW_INIT) BEGIN
  RUN(1.01.01, "Setup Dut Power -48V", WaitForCurrent, DUT0:1.01.1.L:1.01.01.L, TS_AUTOREPEAT:1;, )
  //RUN(1.01.10, "Delay", TmDelay_1, DUT0:1.01.10:1.01.1L, , )
  RUN(DCFWLoad,"DCFirmWareLoad", DCFirmwareload, DUT0:DCFWLoad,,)
  RUN(DCFWLoad_check, "check DCFW load state",mBlockTPStatementMargin, DUT0:DCFWLoadcheck, , )
  DO(ReloadDCFW,TS_BLOCK:REloadDCFW;,)
  RUN(PSUC.01, "Switch Off DUT Power - PSU", SetOutputState, DUT0:PSUC:PSUC.01, , )
  RUN(TIFC.01, "Switch Off DUT Power - TIF", TifDoAction, DUT0:TIFC:TIFC.01, , )
  RUN(TIFC.02, "Switch On DUT Power - TIF", TifDoAction, DUT0:TIFC:TIFC.02, , )
  RUN(TIFLOAD.01, "TIF check (ping)", Ping, DUT0:TIFLOAD.01, , )
  RUN(TIFC.07, "Set DMM to Single Pos", TifDoAction, DUT0:TIFC:TIFC.07, , )
  RUN(IRFSW, "Initialize RF switch", ReportRfSwitchConfiguration, DUT0:IRFSW, , )
  RUN(EXERCISE, "Exercise RF switches", ExerciseSwitches, DUT0:EXERCISE, , )
  RUN(ALIGN_SA, "Alignment of SA", RcmParallelTasks, DUT0:ALIGN_SA, , )
  DO(STATECACHE_DISABLE)
  RUN(4.09, "Save Children Info", SaveChildInfoToSystem, DUT0:4.09, TS_AUTOREPEAT:1;, )
  RUN(CHECKTCP, "Check connection of TestConnector", MeasureVoltages, DUT0:CHECKTCP, TS_AUTOREPEAT:2;, )
  DO(INIT_BOOT)
  RUN(SCRX, "Set Cpri Rate", TmSetupCpriRate, DUT0:SCRX, , )
END_GROUP

GROUP(RFMUX_INIT) BEGIN
  RUN(RFMUX_INIT, "Set RF MUX to INIT path", mSelectRfMuxPath, DUT0:RFMUX:RFMUX.INIT, , )
END_GROUP

GROUP(INIT_BOOT) BEGIN
  RUN(INIT_BOOT.01, "Set TEST_ENABLE Low", TifDoAction, DUT0:TIFC:TIFC.08, , )
  RUN(INIT_BOOT.02, "Set MCU_RESET Low", TifDoAction, DUT0:TIFC:TIFC.05, , )
  RUN(INIT_BOOT.03, "Set PROD_MODE_SEL Low", TifDoAction, DUT0:TIFC:TIFC.11, , )
  RUN(INIT_BOOT.04, "Set BOOT_MODE_SEL High", TifDoAction, DUT0:TIFC:TIFC.03, , )
  DO(IfNGTIF1)
END_GROUP

GROUP(NETBOOT_SETUP) BEGIN
  RUN(NETBS.01, "Terminate NetBoot Server", TerminateServer, DUT0:NETBS.01, , )
  RUN(NETBS.02, "Remove files from files.rc", PrepareFilesResource, DUT0:NETBS.02, , )
  RUN(NETBS.03, "Prepare netbootd.rc", PrepareNetbootdResource, DUT0:NETBS.03, , )
  RUN(NETBS.04, "Prepare files.rc", PrepareFilesResource, DUT0:NETBS.04, , )
  RUN(NETBS.05, "Move files to /etsw/", ConvertFile, DUT0:NETBS.05, , )
  RUN(NETBS.06, "Initialise NetBoot Server", Initialise, DUT0:NETBS.06, , )
END_GROUP

GROUP(NETBOOT_BOOT) BEGIN
  RUN(TIFC.08, "Set TEST_ENABLE Low", TifDoAction, DUT0:TIFC:TIFC.08, , )
  RUN(TIFC.10, "Set PROD_MODE_SEL High", TifDoAction, DUT0:TIFC:TIFC.10, , )
  RUN(1.03G.01, "Start ETSW", VerifyStartupSequence3, DUT0:1.03G:1.03G.01, TS_AUTOREPEAT:2;, )
  RUN(NETBB.06, "Check ETSW boot OK or not", mBlockTPStatementMargin, DUT0:NETBB, , )
  DO(REDO_NTEBOOT_BOOT, TS_BLOCK:REBOOT_ETSW;, )
  //RUN(1.03G.02, "Start ETSW", VerifyStartupSequence3, DUT0:1.03G:1.03G.01, TS_AUTOREPEAT:2;, )
  RUN(TIFC.11, "Set PROD_MODE_SEL Low", TifDoAction, DUT0:TIFC:TIFC.11, , )
  RUN(ETSW.01, "Check ETSW Version", mSaveString, DUT0:ETSW:ETSW.01, , )
  RUN(ETSW.02, "Wait for ETSW to fetch HWDB", mExecuteTest, DUT0:ETSW:ETSW.02, TS_AUTOREPEAT:1;, )
END_GROUP

GROUP(NETBOOT_REBOOT) BEGIN
  RUN(TIFC.08, "Set TEST_ENABLE Low", TifDoAction, DUT0:TIFC:TIFC.08, , )
  RUN(TIFC.10, "Set PROD_MODE_SEL High", TifDoAction, DUT0:TIFC:TIFC.10, , )
  RUN(1.03G.01, "Start ETSW", VerifyStartupSequence3, DUT0:1.03G:1.03G.01.X, TS_AUTOREPEAT:3;, )
  RUN(TIFC.11, "Set PROD_MODE_SEL Low", TifDoAction, DUT0:TIFC:TIFC.11, , )
END_GROUP

GROUP(REDO_NTEBOOT_BOOT) BEGIN
  DO(DCDC, TS_BLOCK:DCDC;, )
  DO(NETBOOT_SETUP, TS_BLOCK:NETBOOT_SETUP;, )
  DO(NETBOOT_REBOOT, TS_BLOCK:NETBOOT_REBOOT;, )
END_GROUP

GROUP(DCDC) BEGIN
  RUN(1.01.01, "Setup Dut Power -48V", WaitForCurrent, DUT0:1.01.1:1.01.01, TS_AUTOREPEAT:1;, )
  RUN(1.01.24, "48V_OK & Under Voltage Turnoff", UnderVoltage_48V_OK, DUT0:1.01.6, , )
END_GROUP

GROUP(PSU35.0) BEGIN
  RUN(PSU35.0, "Set PSU to -49.0 V", mPSUControl, DUT0:PSUC:PSU35.0, , )
END_GROUP

GROUP(PSU39.0) BEGIN
  RUN(PSU39.0, "Set PSU to -49.0 V", mPSUControl, DUT0:PSUC:PSU39.0, , )
END_GROUP

GROUP(PSU46.0) BEGIN
  RUN(PSU46.0, "Set PSU to -46.0 V", mPSUControl, DUT0:PSUC:PSU46.0, , )
END_GROUP

GROUP(PSU48) BEGIN
  RUN(PSUC.48, "Set PSU to -48 V", mPSUControl, DUT0:PSUC:PSUC.48, , )
END_GROUP

GROUP(PSU55) BEGIN
  RUN(PSUC.55, "Set PSU to -55 V", mPSUControl, DUT0:PSUC:PSUC.55, , )
END_GROUP


GROUP(DCFirm_Load) BEGIN
  RUN(1.01.01, "Setup Dut Power -48V", WaitForCurrent, DUT0:1.01.1:1.01.01, TS_AUTOREPEAT:1;, )
  RUN(DCFWLoad,"DCFirmWareLoad", DCFirmwareload, DUT0:DCFWLoad, , )
  RUN(PSUC.01, "Switch Off DUT Power - PSU", SetOutputState, DUT0:PSUC:PSUC.01, , )
END_GROUP

GROUP(Setloglev7) BEGIN
  RUN(Setloglev7, "Set sysloglev 7", mExecuteTest, DUT0:Setloglev7, TS_BLOCK:Setloglev7;, )
END_GROUP

GROUP(Setloglev0) BEGIN
  RUN(Setloglev0, "Set sysloglev 0", mExecuteTest, DUT0:Setloglev0, TS_BLOCK:Setloglev0;, )
END_GROUP

GROUP(TX_VGA_EXTRA_DELAY_ON) BEGIN
  RUN(TX_VGA_EXTRA_DELAY_ON, "X_VGA_EXTRA_DELAY_ON", mExecuteTest, DUT0:VGADELAY_ON, TS_BLOCK:VGADELAY_ON;, )
END_GROUP

GROUP(TX_VGA_EXTRA_DELAY_OFF) BEGIN
  RUN(TX_VGA_EXTRA_DELAY_OFF, "TX_VGA_EXTRA_DELAY_OFF", mExecuteTest, DUT0:VGADELAY_OFF, TS_BLOCK:VGADELAY_OFF;, )
END_GROUP

GROUP(PROD_DB_UPDATE) BEGIN
  RUN(4.04.01, "Database Set", WriteProductDataFromFile, DUT0:4.04.01, , )
  RUN(4.04.02, "Write Static ComponentConfigId", WriteProductDataFromFile, DUT0:4.04.02, , )
  DO(XENON)
  RUN(2.04.01, "Set ComponentConfigId - From Vendor Id (rxCtrl)", SetCompConfigIdFromVendorId2, DUT0:2.04.01,TS_BLOCK:2.04.01;, )
  RUN(2.04.02, "Set ComponentConfigId - From Vendor Id (paCtrl)", SetCompConfigIdFromVendorId2, DUT0:2.04.02, , )
  RUN(2.04F, "Set ComponentConfigId - From Mounted Child Product", mSetCompConfigIdFromMountedChildProduct, DUT0:2.04F, TS_BLOCK:2.04F:KRC;, )
  //RUN(2.04G, "Check Filte Type FinguCP_115.1.0", mBlockTPStatementMargin, DUT0:2.04G, TS_BLOCK:2.04G;, )
  //RUN(2.04H, "Check Filte Type TatfookCP_115.2.0", mBlockTPStatementMargin, DUT0:2.04H, TS_BLOCK:2.04H;, )
  RUN(2.04J, "Check Filte Type Fingu_116.1.0", mBlockTPStatementMargin, DUT0:2.04J, TS_BLOCK:2.04J;, )
  RUN(2.04K, "Check Filte Type Luxshare_116.2.0", mBlockTPStatementMargin, DUT0:2.04K, TS_BLOCK:2.04K;, )
  RUN(2.04L, "Check Filte Type TatfookCP_116.3.0", mBlockTPStatementMargin, DUT0:2.04L, TS_BLOCK:2.04L;, )
  //RUN(4.04.03, "Write RX Delay for Fingu_115.1.0 CP", WriteProductDataFromFile, DUT0:4.04.03, TS_BLOCK:FINGU_115_1;, )
  //RUN(4.04.04, "Write RX Delay for Tatfook_115.2.0 CP", WriteProductDataFromFile, DUT0:4.04.04, TS_BLOCK:TATFOOK_115_2;, )
  RUN(4.04.05, "Write RX Delay for Fingu_116.1.0", WriteProductDataFromFile, DUT0:4.04.05, TS_BLOCK:FINGU_116_1;, )
  RUN(4.04.06, "Write RX Delay for Luxshare_116.2.0", WriteProductDataFromFile, DUT0:4.04.06, TS_BLOCK:LUXSHARE_116_2;, )
  RUN(4.04.07, "Write RX Delay for Tatfook_116.3.0", WriteProductDataFromFile, DUT0:4.04.05, TS_BLOCK:TATFOOK_116_3;, )
  RUN(4.07.01, "Save PROD DB after 152 12- updates", mExecuteTest, DUT0:4.07.01, , )
END_GROUP

GROUP(BP_UPDATE) BEGIN
  RUN(4.06.1, "Write PID", WritePidWithMarketName2, DUT0:4.06.1, , )
  RUN(4.06.2, "Set mac_address", WriteMacAddress2, DUT0:4.06.2, , )
  //RUN(4.03A, "Write PID Info Update", WriteProductDataFromFile, DUT0:4.03A, , )
  RUN(4.06.3, "Save Board Parameters after updates", mExecuteTest, DUT0:4.06.3, , )
END_GROUP

GROUP(SFP_SIGNALS) BEGIN
  RUN(CPRI_B_ON, "CPRI on Port B", EnableDisableCpriPort, DUT0:CPRIBON, TS_AUTOREPEAT:2;, )
  RUN(1.11CB, "SFP Signals - CPRI_B", SfpMainPortTest2, DUT0:1.11CB, TS_AUTOREPEAT:2;, )
  RUN(CPRI_B_OFF, "CPRI off Port B", EnableDisableCpriPort, DUT0:CPRIBOFF, TS_AUTOREPEAT:2;, )
  RUN(CPRI_A_ON, "CPRI on Port A", EnableDisableCpriPort, DUT0:CPRIAON, TS_AUTOREPEAT:2;, )
  RUN(1.11CA, "SFP Signals - CPRI_A", SfpMainPortTest2, DUT0:1.11CA, TS_AUTOREPEAT:2;, )
END_GROUP

GROUP(XENON) BEGIN
  RUN(XENON, "Xenon Init - Probe Mode", mExecuteTest, DUT0:XENON, , )
END_GROUP

GROUP(INIT) BEGIN
  RUN(CPRI_B_OFF, "CPRI off Port B", EnableDisableCpriPort, DUT0:CPRIBOFF, , )
  RUN(DBROLLBACK, "Read PROD DB from Flash", mExecuteTest, DUT0:DBROLLBACK, , )
  RUN(PREXENON, "Settings before Xenon Init", mExecuteTest, DUT0:PREXENON, , )

  RUN(XENON_INIT, "Xenon Init", mExecuteTest, DUT0:XENON_INIT,TS_AUTOREPEAT:3; , )
  //RUN(POSTXENON, "Settings after Xenon Init", mExecuteTest, DUT0:POSTXENON, , )
  RUN(ASICREV.1, "Asic revision", mSaveString, DUT0:ASICREV.1, , )
  RUN(ASICREV.2, "Asic revision", mSaveString, DUT0:ASICREV.2, , )
END_GROUP


GROUP(CORE_Voltage_Cal) BEGIN
  RUN(2.05.01, "Core Voltage Cal Fast Mode", mReadListInt, DUT0:2.05.01, TS_BLOCK:2.05;TM_AUTOREPEAT_I:2;, )
  RUN(2.05.02, "Core Voltage Cal Nominal Mode", mReadListInt, DUT0:2.05.02, TS_BLOCK:2.05;TM_AUTOREPEAT_I:2;, )
  RUN(2.05.03, "Core Voltage Cal Slow Mode", mReadListInt, DUT0:2.05.03, TS_BLOCK:2.05;TM_AUTOREPEAT_I:2;, )
END_GROUP


GROUP(DIGITAL) BEGIN
  DO(RFMUX_INIT)
  RUN(1.01B, "DC/DC ADC Test", mReadDouble, DUT0:1.01B, TS_AUTOREPEAT:2;, )
  DO(CORE_Voltage_Cal)
  DO(VOLTAGE_SUPERVISION)
  DO(DC_N48V_OK, TS_BLOCK:DC_N48V_OK;, )
  RUN(1.01.0.01, "Check DC/DC Status Signals", mReadInt, DUT0:1.01C, , )
  RUN(1.05, "Temperature Sensors", mAbsoluteTemp2, DUT0:1.05, , )
  //DO(Setloglev7)
  RUN(2.01, "RET VCC Calibration", mRetVccCalibration2, DUT0:2.01, TS_BLOCK:2.01;, )
  //DO(Setloglev0)
  RUN(2.02.1, "Calibrate ANT_A/B voltage sensor", mDcBiasCalibration, DUT0:2.02.1, TS_BLOCK:2.02;, )
  RUN(2.02.2, "Calibrate ANT_A/B current sensor", mDcBiasCalibration, DUT0:2.02.2, TS_BLOCK:2.02;, )
  RUN(RFMUX_ANTA_M1, "Set RF MUX to ANTA_LOADA path", mSelectRfMuxPath, DUT0:RFMUX:RFMUX.ANTA_M, TS_AUTOREPEAT:2;, )
  RUN(2.03.1, "AIB Internal Resistance ANT_A", mInternalAibResistance, DUT0:2.03.1, TS_BLOCK:2.03;, )
  RUN(2.03.2, "AIB Internal Resistance ANT_B", mInternalAibResistance, DUT0:2.03.2, TS_BLOCK:2.03;, )
  RUN(2.02.3, "Calibrate ANT_C/D voltage sensor", mDcBiasCalibration, DUT0:2.02.3, TS_BLOCK:2.02:4T4R:KRC; TS_AUTOREPEAT:3;, )
  RUN(2.02.4, "Calibrate ANT_C/D current sensor", mDcBiasCalibration, DUT0:2.02.4, TS_BLOCK:2.02:4T4R:KRC; TS_AUTOREPEAT:3;, )
  RUN(RFMUX_ANTC_M1, "Set RF MUX to ANTC_LOADC path", mSelectRfMuxPath, DUT0:RFMUX:RFMUX.ANTC_M, TS_BLOCK:4T4R;TS_AUTOREPEAT:2;, )
  RUN(2.03.3, "AIB Internal Resistance on ANT C", mInternalAibResistance, DUT0:2.03.3, TS_BLOCK:2.03:4T4R:KRC; TS_AUTOREPEAT:3;, )
  RUN(2.03.4, "AIB Internal Resistance on ANT D", mInternalAibResistance, DUT0:2.03.4, TS_BLOCK:2.03:4T4R:KRC; TS_AUTOREPEAT:3;, )
  RUN(2.07, "RET port current sensor ", RetPortCurrentSensor, DUT0:2.07, TS_BLOCK:2.07;, )
  RUN(1.11.3, "SFP Signals", mReadInt, DUT0:1.11.3, , )
  //RUN(1.13.2, "Check XAlarm", mExternalIoDownTest, DUT0:1.13.2, TS_BLOCK:1.13.2;TS_AUTOREPEAT:1;, )
  RUN(1.14, "Push button check", mResetButtonCheck, DUT0:1.14, TS_BLOCK:1.14;TS_AUTOREPEAT:2;, )
  RUN(SWCHECK, "Check SW and DB versions", mSaveString, DUT0:SWCHECK, , )
END_GROUP

GROUP(DIGITAL_2) BEGIN
  DO(1.13.1, TS_BLOCK:1.13.1;, )
  DO(1.15, TS_BLOCK:1.15;, )
  DO(MODEM, TS_BLOCK:MODEM;, )
  RUN(LTU.L, "LTU Lock test", mExecuteTest, DUT0:LTU.L, TS_AUTOREPEAT:1;, )
  RUN(RICR.L, "RICR Lock test", TmRicrStatus, DUT0:RICR.L, TS_AUTOREPEAT:1;, )
  RUN(1.06C, "Synthesizers PLL Unlock Detect Check", mExecuteTest, DUT0:1.06C, TS_AUTOREPEAT:1;, )
  //DO(Setloglev7)
  RUN(1.06, "Synthesizers PLL Lock Detect Check", mExecuteTest, DUT0:1.06, TS_AUTOREPEAT:1;, )
  //DO(Setloglev0)
END_GROUP

GROUP(1.13.1) BEGIN
  RUN(TIFC.45, "Enable RS485 RET", TifDoAction, DUT0:TIFC:TIFC.45, , )
  RUN(1.13.1, "RET Communication Test", RetCommunicationTest, DUT0:1.13.1, TS_AUTOREPEAT:2;, )
END_GROUP

GROUP(1.15) BEGIN
  //RUN(1.15.1, "DC_FAN_VCC Test", mBiasRetCheck, DUT0:1.15.1, TS_BLOCK:1.15.1;, )
  //RUN(1.15.2, "FAN_PRESENT_N Test", mExternalIoDownTest, DUT0:1.15.2, , )
  RUN(TIFC.43, "Connect APC RS485", TifDoAction, DUT0:TIFC:TIFC.43, , )
  RUN(1.15.3, "APC Communication Test", RetCommunicationTest, DUT0:1.15.3, TS_AUTOREPEAT:1;, )
  //RUN(TIFC.44, "Connect FAN RS485", TifDoAction, DUT0:TIFC:TIFC.44, , )
  //RUN(1.15.4, "FAN Communication Test", RetCommunicationTest, DUT0:1.15.4, TS_AUTOREPEAT:1;, )
END_GROUP

GROUP(MODEM) BEGIN
  RUN(RFMUX_ANTA_M, "Set RF MUX to ANTA_MODEMA path", mSelectRfMuxPath, DUT0:RFMUX:RFMUX.ANTA_M, , )
  RUN(1.07, "Modem Receiver OOK A/B", ModemRxTest, DUT0:1.07.2;DUT0:1.07.2, TS_BLOCK:1.07.2;, )
  RUN(1.08, "Modem Transmitter OOK A/B", ModemTxTest, DUT0:1.08.2;DUT0:1.08.2, TS_AUTOREPEAT:2;TS_BLOCK:1.08.2;, )
  RUN(RFMUX_ANTC_M, "Set RF MUX to ANTC_MODEMC path", mSelectRfMuxPath, DUT0:RFMUX:RFMUX.ANTC_M, , )
  RUN(1.07.C, "Modem Receiver OOK C/D", ModemRxTest, DUT0:1.07.6;DUT0:1.07.6, TS_BLOCK:1.07:4T4R;, )
  RUN(1.08.C, "Modem Transmitter OOK C/D", ModemTxTest, DUT0:1.08.6;DUT0:1.08.6, TS_AUTOREPEAT:2;TS_BLOCK:1.08:1.07:4T4R;, )
END_GROUP

GROUP(VOLTAGE_SUPERVISION) BEGIN
  DO(PSU55)
  RUN(1.01.02, "Input Voltage Supervision", VoltageSupervisionCheck2, DUT0:1.01.02, TS_AUTOREPEAT:2;, )
  RUN(1.01.03, "Input Current Supervision", CurrentSupervisionCheck2, DUT0:1.01.03, TS_BLOCK:1.01.03;, )
  DO(PSU48)
END_GROUP

GROUP(DCDC_PNOM) BEGIN
  RUN(3.01.1, "Measure Bias A/B via SPI", mBiasRetCheck, DUT0:3.01.1, TS_BLOCK:3.01.1;TS_AUTOREPEAT:2;, )
  RUN(3.01.2, "Measure Bias A/B using DMM", mMeasureRetVcc, DUT0:3.01.2, TS_BLOCK:3.01.2;TS_AUTOREPEAT:2;, )
  RUN(3.01.4, "Measure Bias C/D via SPI", mBiasRetCheck, DUT0:3.01.4, TS_BLOCK:3.01.4;TS_AUTOREPEAT:2;, )
  RUN(3.01.5, "Measure Bias C/D using DMM", mMeasureRetVcc, DUT0:3.01.5, TS_BLOCK:3.01.5;TS_AUTOREPEAT:2;, )
  RUN(3.01.3, "Measure RET VCC", mMeasureRetVcc, DUT0:3.01.3, TS_BLOCK:3.01.3;, )
END_GROUP

GROUP(DC_N48V_OK) BEGIN
  DO(PSU46.0)
  RUN(1.01.17, "DC_N48V_OK @ -46 V", mReadDouble, DUT0:1.01.17, , )
  RUN(1.01E, "Check DC voltages @ -46V and -35V", mDiffValueCheck, DUT0:1.01E, , )
  RUN(1.01.18, "DC_N48V_OK @ -35 V", mReadDouble, DUT0:1.01.18, , )
  DO(PSU48)
END_GROUP

GROUP(LED) BEGIN
  RUN(LED.01, "CU LED Check", LEDTestAuto, DUT0:1.09A, TS_AUTOREPEAT:2;, )
  RUN(LED.02, "SFP#1 LED Check", LEDTestAuto, DUT0:1.09B, TS_AUTOREPEAT:2;, )
  RUN(LED.03, "SFP#2 LED Check", LEDTestAuto, DUT0:1.09C, TS_AUTOREPEAT:2;, )
END_GROUP

GROUP(RXCAL) BEGIN
  DO(STATECACHE_ENABLE)
  DO(RFMUX_INIT)
  RUN(2.70.3, "SwJesd204bInitLinks", mExecuteTest, DUT0:2.70.3, , )
  RUN(2.61, "RX RF VGA Characterization", mRxRfAttCal2, DUT0:2.61, TS_AUTOREPEAT:2;, )
  RUN(2.62, "RX IF VGA Characterization", mRxGainCal2, DUT0:2.62, TS_BLOCK:2.62;, )
  RUN(2.63.1, "Set RX1 Gain Parameters", mRxFrontendSetGain, DUT0:2.63.1, TS_AUTOREPEAT:2;, )
  RUN(2.63.2, "RX1 and RX3 Gain Calibration", mRxFrontendCal4, DUT0:2.63.2, TS_AUTOREPEAT:2;,  )
  RUN(2.66, "RX IF Filter Freq Response", mRxIfFreqCal, DUT0:2.66, TS_AUTOREPEAT:2;,  )
  RUN(2.70.1, "RX AAGC Gain Calibration", mRxAAgcCal2, DUT0:2.70.1, TS_AUTOREPEAT:2;,  )
  RUN(2.70.2, "RX AAGC Phase And Delay Cal", mRxAAgcPhaseAndDelayCal, DUT0:2.70.2, TS_AUTOREPEAT:2;, )
  RUN(4.07.03, "Save HWDB", mExecuteTest, DUT0:4.07.03, TS_BLOCK:SAVE_HWDB_RXCAL;, )
  DO(STATECACHE_DISABLE)
END_GROUP

GROUP(RXCI) BEGIN
  RUN(RXCI, "Initialize Rx Compensation", mExecuteTest, DUT0:RXCI, , )
END_GROUP

GROUP(RXPERF) BEGIN
  DO(STATECACHE_ENABLE)
  DO(RFMUX_INIT)

  DO(RXCI)
  RUN(3.61, "RX Gain Accuracy", mRxGain, DUT0:3.61, TS_BLOCK:3.61;, )
  RUN(3.61B, "RX Gain Accuracy using SG2", mRxGain, DUT0:3.61B, TS_BLOCK:3.61B;, )
  RUN(3.63.4, "Temperature Sensors", mAbsoluteTemp2, DUT0:3.63.4, , )
  RUN(3.63, "RX Noise Figure", mRxNoiseFigure, DUT0:3.63, TS_AUTOREPEAT:2;TS_BLOCK:3.63;, )

  RUN(3.68, "RX EVM", mRxEvm, DUT0:3.68, TS_AUTOREPEAT:1;TS_BLOCK:3.68;, )
  RUN(3.69.1, "RX IM Sensitivity", mRxIM2Gen, DUT0:3.69.1, TS_BLOCK:3.69:BASE_SYSTEM_1;, )
  RUN(3.70, "RX Blocking", mRxBlocking, DUT0:3.70, TS_AUTOREPEAT:2;TS_BLOCK:3.70;, )
  DO(STATECACHE_DISABLE)
END_GROUP

GROUP(HICURRENT) BEGIN
  RUN(1.01.1.H, "Setup Dut Power -48V, high current limit", WaitForCurrent, DUT0:1.01.1.H, , )
END_GROUP

GROUP(JESDLINK) BEGIN
  RUN(1.16, "DAC SerDes link quality check", JesdLinkTest, DUT0:1.16, , )
END_GROUP

GROUP(TELNET_CLEAR) BEGIN
  RUN(TELNET_CLOSE, "Close DUT Telnet Port", ClosePort, DUT0:TELNET:TELNET.02, , )
  RUN(TELNET_OPEN, "Open DUT Telnet Port", OpenPort, DUT0:TELNET:TELNET.01, , )
END_GROUP

GROUP(PAWARMUP) BEGIN
  DO(STATECACHE_ENABLE)
  RUN(2.21.5, "PA increase 15% target for WARM UP", mCalibratePaVddAndBias2, DUT0:2.21.5, , )
  DO(TELNET_CLEAR)
  DO(STATECACHE_DISABLE)
END_GROUP

GROUP(PACAL) BEGIN
  DO(HICURRENT, TS_BLOCK:HICURRENT;, )
  DO(STATECACHE_ENABLE)
  RUN(2.21.2, "PA VDD and BIAS Calibration", mCalibratePaVddAndBias2, DUT0:2.21.2, , )
  RUN(4.08, "Save PA DB after calibration", mExecuteTest, DUT0:4.08, , )
  DO(TELNET_CLEAR)
  DO(STATECACHE_DISABLE)
END_GROUP

GROUP(HICURRENTPAWARM) BEGIN
  RUN(1.01.2.H, "Setup Dut Power -48V, high current limit", WaitForCurrent, DUT0:1.01.2.H, , )
END_GROUP


GROUP(PACAL_FINALLY) BEGIN
  DO(STATECACHE_ENABLE)
  RUN(2.21.2, "PA VDD Calibration all power class finally", mCalibratePaVddAndBias2, DUT0:2.21.2, , )
  RUN(4.08, "Save PA DB after calibration", mExecuteTest, DUT0:4.08, , )
  DO(TELNET_CLEAR)
  DO(STATECACHE_DISABLE)
END_GROUP

GROUP(TXCAL) BEGIN
  DO(PACAL, TS_BLOCK:PACAL_HPC;, )
  DO(TXCAL_1, TS_BLOCK:TXCAL_1;, )
  DO(TXCAL_2, TS_BLOCK:TXCAL_2;, )
  DO(TXCAL_3, TS_BLOCK:TXCAL_3;, )
  DO(TXCAL_4, TS_BLOCK:TXCAL_4;, )
  RUN(4.07.04, "Save HWDB", mExecuteTest, DUT0:4.07.04, TS_BLOCK:SAVE_HWDB_TXCAL;, )
  DO(CLIPPING_CAL, TS_BLOCK:CLIPPING_CAL;, )
END_GROUP

GROUP(TXCAL_1) BEGIN
  DO(RFMUX_INIT)
  RUN(2.70.3, "SwJesd204bInitLinks", mExecuteTest, DUT0:2.70.3, , )
  RUN(CHPWRCL1C, "Change to Power Class 1", mChangePowerClass, DUT0:CHPWRCL1C, , )
  RUN(3.38.1, "PA Bias Currents, Idle", mPaBias, DUT0:3.38.1,  TS_BLOCK:3.38.1; , )
  RUN(1.21, "TOR Noise Floor", mTorNoiseFloor, DUT0:1.21, TS_BLOCK:1.21;, )
  RUN(IQDCOFFSET, "LO Leakage Suppression", mTxIQDcOffsetCalibration, DUT0:IQDCOFFSET, , )
  RUN(2.23.1.1, "Temperatures before TX Cal", mAbsoluteTemp2, DUT0:2.23.1.1, , )
  RUN(2.24.0.1, "Temperature TOR", mAbsoluteTemp2, DUT0:2.24.0.1, , )
  RUN(2.24, "TX VGA Calibration", mTxVgaCalibration, DUT0:2.24, , )
  RUN(2.24.0.2, "Temperature TOR", mAbsoluteTemp2, DUT0:2.24.0.2, , )
  RUN(RIC.1, "Ricr Status", mSaveString, DUT0:RIC.1, , )
  RUN(2.25.1, "TOR Step Attenuator Calibration", mTorStepAttCal, DUT0:2.25.1, , )
  RUN(2.25.2, "TX Output Power Calibration_LO1", mTxFrequencyCalibration, DUT0:2.25.2, , )
  RUN(2.25.6, "TX Output Power Calibration_LO2", mTxFrequencyCalibration, DUT0:2.25.6, , )
  //RUN(2.25.7, "TX Output Power Calibration_LO3", mTxFrequencyCalibration, DUT0:2.25.7, , )
  DO(2.26.1)
  RUN(2.23.1.2, "Temperature Drift during TX Cal", mRelativeTemp2, DUT0:2.23.1.2, , )
  RUN(2.23.1.3, "Temperatures after TX Cal", mAbsoluteTemp2, DUT0:2.23.1.3, , )
  RUN(2.28, "TX IQ Start Values Calibration", mTxIqStartValuesCalibration, DUT0:2.28, TS_AUTOREPEAT:2;, )
  RUN(2.29, "TX IQ Filter Delay Calibration", mTxImCalibration, DUT0:2.29, TS_BLOCK:2.29;, )
  RUN(2.30, "FU Equalizer Calibration", mFuEqualizerCal, DUT0:2.30, TS_BLOCK:TXEQ:2.30;, )
  RUN(2.31, "TX Delay Calculation", mCalculateTxDelay, DUT0:2.31, TS_BLOCK:TXEQ:2.31;, )
  RUN(2.32, "TX Digital TX VSWR meter Calibration", mTxDigitalVSWRCalibration, DUT0:2.32, TS_BLOCK:2.32;, )
  DO(TXOFF)
  DO(TXCAL_1.1, TS_BLOCK:TXCAL_1.1;,)

END_GROUP


GROUP(TXCAL_2) BEGIN
  DO(RFMUX_INIT)
  RUN(CHPWRCL2C, "Change to Power Class 2", mChangePowerClass, DUT0:CHPWRCL2C, , )
  RUN(3.38.2, "PA Bias Currents, Idle", mPaBias, DUT0:3.38.2,  TS_BLOCK:3.38.2; , )
  RUN(2.23.2.1, "Temperatures before TX Cal", mAbsoluteTemp2, DUT0:2.23.2.1, , )
  RUN(RIC.2, "Ricr Status", mSaveString, DUT0:RIC.2, , )

  DO(2.26.2)
  RUN(2.23.2.2, "Temperature Drift during TX Cal", mRelativeTemp2, DUT0:2.23.2.2, , )
  RUN(2.23.2.3, "Temperatures after TX Cal", mAbsoluteTemp2, DUT0:2.23.2.3, , )
  DO(TXCAL_2.1, TS_BLOCK:TXCAL_2.1;,)
  DO(TXOFF)
END_GROUP

GROUP(TXCAL_3) BEGIN
  DO(RFMUX_INIT)
  RUN(CHPWRCL3C, "Change to Power Class 3", mChangePowerClass, DUT0:CHPWRCL3C, , )
  RUN(3.38.3, "PA Bias Currents, Idle", mPaBias, DUT0:3.38.3,  TS_BLOCK:3.38.3; , )
  RUN(2.23.3.1, "Temperatures before TX Cal", mAbsoluteTemp2, DUT0:2.23.3.1, , )
  RUN(RIC.3, "Ricr Status", mSaveString, DUT0:RIC.3, , )

  DO(2.26.3)
  RUN(2.23.3.2, "Temperature Drift during TX Cal", mRelativeTemp2, DUT0:2.23.3.2, , )
  RUN(2.23.3.3, "Temperatures after TX Cal", mAbsoluteTemp2, DUT0:2.23.3.3, , )
  DO(TXCAL_3.1, TS_BLOCK:TXCAL_3.1;,)
  DO(TXOFF)
END_GROUP

GROUP(TXCAL_4) BEGIN
  DO(RFMUX_INIT)
  RUN(CHPWRCL4C, "Change to Power Class 4", mChangePowerClass, DUT0:CHPWRCL4C, , )
  RUN(3.38.4, "PA Bias Currents, Idle", mPaBias, DUT0:3.38.4,  TS_BLOCK:3.38.4; , )
  RUN(2.23.4.1, "Temperatures before TX Cal", mAbsoluteTemp2, DUT0:2.23.4.1, , )
  RUN(RIC.4, "Ricr Status", mSaveString, DUT0:RIC.4, , )
  DO(2.26.4)
  RUN(2.23.4.2, "Temperature Drift during TX Cal", mRelativeTemp2, DUT0:2.23.4.2, , )
  RUN(2.23.4.3, "Temperatures after TX Cal", mAbsoluteTemp2, DUT0:2.23.4.3, , )
  DO(TXCAL_4.1, TS_BLOCK:TXCAL_4.1;,)
  DO(TXOFF)
END_GROUP

GROUP(2.26.1) BEGIN
  DO(STATECACHE_ENABLE)
  RUN(2.26, "LO Leakage Suppression", mTxIQDcOffsetCalibration, DUT0:2.26, , )

  RUN(2.26.1, "TX ADAM Calibration", mAnalogeDohertyCal, DUT0:2.26.1, , )

  DO(TELNET_CLEAR)
  DO(STATECACHE_DISABLE)
END_GROUP

GROUP(2.26.2) BEGIN
  DO(STATECACHE_ENABLE)
  RUN(2.26.2, "TX ADAM Calibration", mAnalogeDohertyCal, DUT0:2.26.2, , )
  DO(TELNET_CLEAR)
  DO(STATECACHE_DISABLE)
END_GROUP

GROUP(2.26.3) BEGIN
  DO(STATECACHE_ENABLE)
  RUN(2.26.3, "TX ADAM Calibration", mAnalogeDohertyCal, DUT0:2.26.3, , )
  DO(TELNET_CLEAR)
  DO(STATECACHE_DISABLE)
END_GROUP

GROUP(2.26.4) BEGIN
  DO(STATECACHE_ENABLE)
  RUN(2.26.4, "TX ADAM Calibration", mAnalogeDohertyCal, DUT0:2.26.4, , )
  DO(TELNET_CLEAR)
  DO(STATECACHE_DISABLE)
END_GROUP

GROUP(TXCAL_1.1) BEGIN
  DO(STATECACHE_ENABLE)
  DO(RFMUX_INIT)
  RUN(CHPWRCL1P, "Change to Power Class 1", mChangePowerClass, DUT0:CHPWRCL1P, , )
  RUN(3.29.1.L5.C.L, "TX Psat LTE5 L", mTxPowerAndConsumptionMeas, DUT0:3.29.1.L5.C.L, TS_BLOCK:3.29.1.L5.C.L;, )
  RUN(3.29.1.L5.C.L1, "TX Psat LTE5 L+1", mTxPowerAndConsumptionMeas, DUT0:3.29.1.L5.C.L1, TS_BLOCK:3.29.1.L5.C.L1;, )
  RUN(3.29.1.L5.C.M, "TX Psat LTE5 M", mTxPowerAndConsumptionMeas, DUT0:3.29.1.L5.C.M, TS_BLOCK:3.29.1.L5.C.M;, )
  RUN(3.29.1.L5.C.H, "TX Psat LTE5 H", mTxPowerAndConsumptionMeas, DUT0:3.29.1.L5.C.H, TS_BLOCK:3.29.1.L5.C.H;, )
  RUN(3.29.1.L5.C.H1, "TX Psat LTE5 H-1", mTxPowerAndConsumptionMeas, DUT0:3.29.1.L5.C.H1, TS_BLOCK:3.29.1.L5.C.H1;, )

  DO(TXOFF)
  DO(STATECACHE_DISABLE)
END_GROUP

GROUP(TXCAL_2.1) BEGIN
  DO(STATECACHE_ENABLE)
  RUN(3.29.2.L5.C.L, "TX Psat LTE5 L", mTxPowerAndConsumptionMeas, DUT0:3.29.2.L5.C.L, TS_BLOCK:3.29.2.L5.C.L;, )
  RUN(3.29.2.L5.C.L1, "TX Psat LTE5 L+1", mTxPowerAndConsumptionMeas, DUT0:3.29.2.L5.C.L1, TS_BLOCK:3.29.2.L5.C.L1;, )
  RUN(3.29.2.L5.C.M, "TX Psat LTE5 M", mTxPowerAndConsumptionMeas, DUT0:3.29.2.L5.C.M, TS_BLOCK:3.29.2.L5.C.M;, )
  RUN(3.29.2.L5.C.H, "TX Psat LTE5 H", mTxPowerAndConsumptionMeas, DUT0:3.29.2.L5.C.H, TS_BLOCK:3.29.2.L5.C.H;, )
  RUN(3.29.2.L5.C.H1, "TX Psat LTE5 H-1", mTxPowerAndConsumptionMeas, DUT0:3.29.2.L5.C.H1, TS_BLOCK:3.29.2.L5.C.H1;, )
  DO(STATECACHE_DISABLE)
END_GROUP

GROUP(TXCAL_3.1) BEGIN
  DO(STATECACHE_ENABLE)
  RUN(3.29.3.L5.C.L, "TX Psat LTE5 L", mTxPowerAndConsumptionMeas, DUT0:3.29.3.L5.C.L, TS_BLOCK:3.29.3.L5.C.L;, )
  RUN(3.29.3.L5.C.L1, "TX Psat LTE5 L+1", mTxPowerAndConsumptionMeas, DUT0:3.29.3.L5.C.L1, TS_BLOCK:3.29.3.L5.C.L1;, )
  RUN(3.29.3.L5.C.M, "TX Psat LTE5 M", mTxPowerAndConsumptionMeas, DUT0:3.29.3.L5.C.M, TS_BLOCK:3.29.3.L5.C.M;, )
  RUN(3.29.3.L5.C.H, "TX Psat LTE5 H", mTxPowerAndConsumptionMeas, DUT0:3.29.3.L5.C.H, TS_BLOCK:3.29.3.L5.C.H;, )
  RUN(3.29.3.L5.C.H1, "TX Psat LTE5 H-1", mTxPowerAndConsumptionMeas, DUT0:3.29.3.L5.C.H1, TS_BLOCK:3.29.3.L5.C.H1;, )
  DO(STATECACHE_DISABLE)
END_GROUP

GROUP(TXCAL_4.1) BEGIN
  DO(STATECACHE_ENABLE)
  RUN(3.29.4.L5.C.L, "TX Psat LTE5 L", mTxPowerAndConsumptionMeas, DUT0:3.29.4.L5.C.L, TS_BLOCK:3.29.4.L5.C.L;, )
  RUN(3.29.4.L5.C.L1, "TX Psat LTE5 L+1", mTxPowerAndConsumptionMeas, DUT0:3.29.4.L5.C.L1, TS_BLOCK:3.29.4.L5.C.L1;, )
  RUN(3.29.4.L5.C.M, "TX Psat LTE5 M", mTxPowerAndConsumptionMeas, DUT0:3.29.4.L5.C.M, TS_BLOCK:3.29.4.L5.C.M;, )
  RUN(3.29.4.L5.C.H, "TX Psat LTE5 H", mTxPowerAndConsumptionMeas, DUT0:3.29.4.L5.C.H, TS_BLOCK:3.29.4.L5.C.H;, )
  RUN(3.29.4.L5.C.H1, "TX Psat LTE5 H-1", mTxPowerAndConsumptionMeas, DUT0:3.29.4.L5.C.H1, TS_BLOCK:3.29.4.L5.C.H1;, )
  DO(STATECACHE_DISABLE)
END_GROUP

GROUP(VSWR_CALCULATE_S11) BEGIN
  RUN(2.32.1, "TX Digital VSWR Calculate S11", mTxDigitalVSWRCalculateS11, DUT0:2.32.1, TS_BLOCK:2.32.1;, )
  RUN(2.32.8, "TX Digital VSWR Calculate S11 New SwitchBox", mTxDigitalVSWRCalculateS11, DUT0:2.32.8, TS_BLOCK:2.32.8;, )
END_GROUP

GROUP(CLIPPING_CAL) BEGIN
  DO(STATECACHE_ENABLE)
  RUN(2.35, "Clipping Calibration", mClippingCalibration, DUT0:2.35, TS_BLOCK:2.35;, )
  RUN(4.08.1, "Save PADB to EEPROM", mExecuteTest, DUT0:4.08.1, , )
  DO(STATECACHE_DISABLE)
END_GROUP

GROUP(TXPERF) BEGIN
  DO(TXPERF_1, TS_BLOCK:TXPERF_1;, )
  DO(TXPERF_2, TS_BLOCK:TXPERF_2;, )
  DO(TXPERF_3, TS_BLOCK:TXPERF_3;, )
  DO(TXPERF_4, TS_BLOCK:TXPERF_4;, )
END_GROUP

GROUP(TXPERF_1) BEGIN
  DO(STATECACHE_ENABLE)
  DO(RFMUX_INIT)
  RUN(CHPWRCL1P, "Change to Power Class 1", mChangePowerClass, DUT0:CHPWRCL1P, , )
  RUN(TXEQFT, "Create TX EQ filter taps", mCreateTxEqualizerFilterTaps, DUT0:TXEQFT, TS_BLOCK:TXEQFT;, )
  DO(LTE20_L_1, TS_BLOCK:LTE20_L_1:LTE20_1;, )
  DO(LTE20_M_1, TS_BLOCK:LTE20_M_1:LTE20_1;, )
  DO(LTE20_H_1, TS_BLOCK:LTE20_H_1:LTE20_1;, )
  DO(LTE5_H_1, TS_BLOCK:LTE5_H_1:LTE5_1;, )
  DO(LTE5_M_1, TS_BLOCK:LTE5_M_1:LTE5_1;, )
  DO(LTE5_L_1, TS_BLOCK:LTE5_L_1:LTE5_1;, )
  //DO(LTE5_2C85_M_1, TS_BLOCK:LTE5_2C85_M_1:LTE5_2C85_1;, )
  DO(WCDMA_L_1, TS_BLOCK:WCDMA_L_1:WCDMA_L_1;, )
  DO(WCDMA_2C50_M_1, TS_BLOCK:WCDMA_2C50_M_1:WCDMA_2C50_M_1;, )
  DO(WCDMA_H_1, TS_BLOCK:WCDMA_H_1:WCDMA_H_1;, )
  DO(DCDC_PNOM, TS_BLOCK:DCDC_PNOM;, )
  DO(TXOFF)
  DO(STATECACHE_DISABLE)
END_GROUP

GROUP(LTE5_L_1) BEGIN
  RUN(3.22.1.L5.L , "Temperature TOR", mAbsoluteTemp2, DUT0:3.22.1.L5.L, , )
  RUN(1.66, "Temperature Sensors", mAbsoluteTemp2, DUT0:1.66, , )
  DO(TX_VGA_EXTRA_DELAY_ON)
  RUN(3.21.1.L5.L, "TX Output Power L, VGA, Psat & Consumption 60W", mTxPowerAndConsumptionMeas, DUT0:3.21.1.L5.L, TS_BLOCK:3.21.1.L5.L;TS_AUTOREPEAT:2;, )
  DO(TX_VGA_EXTRA_DELAY_OFF)
  //RUN(3.21.1.L5.L2, "TX Output Power CH2, VGA, Psat & Consumption 60W", mTxPowerAndConsumptionMeas, DUT0:3.21.1.L5.L2, TS_BLOCK:3.21.1.L5.L2;TS_AUTOREPEAT:2;, )
  RUN(3.24.1.L5.L, "TX ACLR & Spectrum LTE5 L", mTxSpectrumMeas, DUT0:3.24.1.L5.L, TS_BLOCK:3.24.1.L5.L;TM_AUTOREPEAT_I:2;, )
  //RUN(3.24.1.K5.L, "TX Spectrum FCC", mTxSpectrumMeas, DUT0:3.24.1.K5.L, TS_BLOCK:3.24.1.K5.L;TM_AUTOREPEAT_I:2;, )
  RUN(3.31.L5.L, "TX VSWR LTE5 L", mTxDigitalVSWR, DUT0:3.31.L5.L, TS_BLOCK:3.31.L5.L;TS_AUTOREPEAT:2;, )
  RUN(3.28.1.L5.L, "TX Consumption Greensheet 60W", mTxPowerAndConsumptionMeas, DUT0:3.28.1.L5.L, TS_BLOCK:3.28.1.L5.L;, )
  RUN(3.25.1.L5.LN, "TX Tx Evm LTE 5 L no EQ", mTxEvm, DUT0:3.25.1.L5.LN, TS_BLOCK:3.25.1.L5.LN;TS_AUTOREPEAT:2;, )
  RUN(3.25.1.L5.L, "TX Tx Evm LTE 5 L", mTxEvm, DUT0:3.25.1.L5.L, TS_BLOCK:3.25.1.L5.L;TS_AUTOREPEAT:2;, )

  RUN(3.29.1.L5.L, "TX Psat LTE5 L", mTxPowerAndConsumptionMeas, DUT0:3.29.1.L5.L, TS_BLOCK:3.29.1.L5.L;TS_AUTOREPEAT:2;, )
  RUN(3.29.1.L5.L1, "TX Psat LTE5 L+1", mTxPowerAndConsumptionMeas, DUT0:3.29.1.L5.L1, TS_BLOCK:3.29.1.L5.L1;TS_AUTOREPEAT:2;, )
  RUN(3.33.1.L5.L, "TX Isolation between branches", mTxIsolation, DUT0:3.33.1.L5.L, TS_BLOCK:3.33.1.L5.L;TS_AUTOREPEAT:2;, )

END_GROUP

GROUP(LTE5_M_1) BEGIN
  RUN(1.55, "Temperature Sensors", mAbsoluteTemp2, DUT0:1.55, , )
  DO(TX_VGA_EXTRA_DELAY_ON)
  RUN(3.21.1.L5.M, "TX Output Power, VGA, Psat & Consumption 60W", mTxPowerAndConsumptionMeas, DUT0:3.21.1.L5.M, TS_BLOCK:3.21.1.L5.M;TS_AUTOREPEAT:2;, )
  DO(TX_VGA_EXTRA_DELAY_OFF)
  //RUN(3.21.1.L5.M1, "TX Output Power CH14, VGA, Psat & Consumption 60W", mTxPowerAndConsumptionMeas, DUT0:3.21.1.L5.M1, TS_BLOCK:3.21.1.L5.M1;TS_AUTOREPEAT:2;, )
  RUN(3.24.1.L5.M, "TX ACLR & Spectrum LTE5 M", mTxSpectrumMeas, DUT0:3.24.1.L5.M, TS_BLOCK:3.24.1.L5.M;TM_AUTOREPEAT_I:2;, )
  RUN(3.24.1.L5.2C50.M, "TX ACLR & Spectrum LTE5 2C50", mTxSpectrumMeas, DUT0:3.24.1.L5.2C50.M, TS_BLOCK:3.24.1.L5.2C50.M;TM_AUTOREPEAT_I:2;, )
  //RUN(3.24.1.K5.M, "TX Spectrum FCC", mTxSpectrumMeas, DUT0:3.24.1.K5.M, TS_BLOCK:3.24.1.K5.M;TM_AUTOREPEAT_I:2;, )
  
  DO(TXOFF)
  RUN(3.28.1.M.2C50.M, "TX DPD Check", mTxStatistics, DUT0:3.28.1.M.2C50.M, TS_BLOCK:3.28.1.M.2C50.M;, )
  RUN(3.31.L5.M, "TX VSWR LTE5 M", mTxDigitalVSWR, DUT0:3.31.L5.M, TS_BLOCK:3.31.L5.M;TS_AUTOREPEAT:2;, )
  RUN(3.28.1.L5.M, "TX Consumption Greensheet 60W", mTxPowerAndConsumptionMeas, DUT0:3.28.1.L5.M, TS_BLOCK:3.28.1.L5.M;, )
  RUN(3.29.1.L5.M, "TX Psat LTE5 M", mTxPowerAndConsumptionMeas, DUT0:3.29.1.L5.M, TS_BLOCK:3.29.1.L5.M;, )
END_GROUP

GROUP(WCDMA_2C50_M_1) BEGIN
  RUN(3.24.1.W.2C50.M, "TX ACLR WCDMA 2C50", mTxSpectrumMeas, DUT0:3.24.1.W.2C50.M, TS_BLOCK:3.24.1.W.2C50.M;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE5_H_1) BEGIN
  RUN(3.22.1.L5.H , "Temperature TOR", mAbsoluteTemp2, DUT0:3.22.1.L5.H, , )
  RUN(1.44, "Temperature Sensors", mAbsoluteTemp2, DUT0:1.44, , )
  DO(TX_VGA_EXTRA_DELAY_ON)
  RUN(3.21.1.L5.H, "TX Output Power, VGA, Psat & Consumption 60W", mTxPowerAndConsumptionMeas, DUT0:3.21.1.L5.H, TS_BLOCK:3.21.1.L5.H;TS_AUTOREPEAT:2;, )
  DO(TX_VGA_EXTRA_DELAY_OFF)
  //RUN(3.21.1.L5.H1, "TX Output Power, VGA, Psat & Consumption 60W", mTxPowerAndConsumptionMeas, DUT0:3.21.1.L5.H1, TS_BLOCK:3.21.1.L5.H1;TS_AUTOREPEAT:2;, )
  RUN(3.24.1.L5.H, "TX ACLR & Spectrum LTE5 H", mTxSpectrumMeas, DUT0:3.24.1.L5.H, TS_BLOCK:3.24.1.L5.H;TM_AUTOREPEAT_I:2;, )
  //RUN(3.24.1.K5.H, "TX Spectrum FCC", mTxSpectrumMeas, DUT0:3.24.1.K5.H, TS_BLOCK:3.24.1.K5.H;TM_AUTOREPEAT_I:2;, )
  RUN(3.31.L5.H, "TX VSWR LTE5 H", mTxDigitalVSWR, DUT0:3.31.L5.H, TS_BLOCK:3.31.L5.H;TS_AUTOREPEAT:2;, )
  RUN(3.28.1.L5.H, "TX Consumption Greensheet 60W", mTxPowerAndConsumptionMeas, DUT0:3.28.1.L5.H, TS_BLOCK:3.28.1.L5.H;, )
  RUN(3.25.1.L5.HN, "TX Tx Evm LTE 5 H no EQ", mTxEvm, DUT0:3.25.1.L5.HN, TS_BLOCK:3.25.1.L5.HN;TS_AUTOREPEAT:2;, )
  RUN(3.25.1.L5.H, "TX Tx Evm LTE 5 H", mTxEvm, DUT0:3.25.1.L5.H, TS_BLOCK:3.25.1.L5.H;TS_AUTOREPEAT:2;, )
  RUN(3.33.1.L5.H, "TX Isolation between branches", mTxIsolation, DUT0:3.33.1.L5.H, TS_BLOCK:3.33.1.L5.H;, )
  RUN(3.29.1.L5.H, "TX Psat LTE5 H", mTxPowerAndConsumptionMeas, DUT0:3.29.1.L5.H, TS_BLOCK:3.29.1.L5.H;, )
  RUN(3.29.1.L5.H1, "TX Psat LTE5 H-1", mTxPowerAndConsumptionMeas, DUT0:3.29.1.L5.H1, TS_BLOCK:3.29.1.L5.H1;, )
END_GROUP

GROUP(LTE10_L_1) BEGIN
  RUN(3.27.1.L10.L, "TX Consumption Greensheet", mTxPowerAndConsumptionMeas, DUT0:3.27.1.L10.L, TS_BLOCK:3.27.1.L10.L;, )
END_GROUP

GROUP(LTE10_H_1) BEGIN
  RUN(3.27.1.L10.H, "TX Consumption Greensheet", mTxPowerAndConsumptionMeas, DUT0:3.27.1.L10.H, TS_BLOCK:3.27.1.L10.H;, )
END_GROUP

GROUP(LTE5_2C10_L_1) BEGIN
  RUN(3.24.1.L5.2C10.L, "TX ACLR & Spectrum LTE5 2C10 L", mTxSpectrumMeas, DUT0:3.24.1.L5.2C10.L, TS_BLOCK:3.24.1.L5.2C10.L;TM_AUTOREPEAT_I:2;, )

END_GROUP

GROUP(LTE5_2C10_H_1) BEGIN
  RUN(3.24.1.L5.2C10.H, "TX ACLR & Spectrum LTE5 2C10 H", mTxSpectrumMeas, DUT0:3.24.1.L5.2C10.H, TS_BLOCK:3.24.1.L5.2C10.H;TM_AUTOREPEAT_I:2;, )

END_GROUP

GROUP(LTE5_2C20_L_1) BEGIN
  RUN(3.24.1.L5.2C20.L, "TX ACLR & Spectrum LTE5 2C20 L", mTxSpectrumMeas, DUT0:3.24.1.L5.2C20.L, TS_BLOCK:3.24.1.L5.2C20.L;TM_AUTOREPEAT_I:2;, )

END_GROUP

GROUP(LTE5_2C20_H_1) BEGIN
  RUN(3.24.1.L5.2C20.H, "TX ACLR & Spectrum LTE5 2C20 H", mTxSpectrumMeas, DUT0:3.24.1.L5.2C20.H, TS_BLOCK:3.24.1.L5.2C20.H;TM_AUTOREPEAT_I:2;, )

END_GROUP

GROUP(LTE5_2C30_L_1) BEGIN
  RUN(3.24.1.L5.2C30.L, "TX ACLR & Spectrum LTE5 2C30 L", mTxSpectrumMeas, DUT0:3.24.1.L5.2C30.L, TS_BLOCK:3.24.1.L5.2C30.L;TM_AUTOREPEAT_I:2;, )

END_GROUP

GROUP(LTE5_2C30_M_1) BEGIN
  RUN(3.24.1.L5.2C30.M, "TX ACLR & Spectrum LTE5 2C30 M", mTxSpectrumMeas, DUT0:3.24.1.L5.2C30.M, TS_BLOCK:3.24.1.L5.2C30.M;TM_AUTOREPEAT_I:2;, )

END_GROUP


GROUP(LTE5_2C65_M_1) BEGIN

  RUN(RS232_OPEN_2C651, "Open RS232 Port", OpenPort, DUT0:DEBUG:DEBUG.02, , )
  RUN(3.24.1.K1.2C65.M, "TX Spectrum LTE5 2C65 M FCC standard", mTxSpectrumMeas, DUT0:3.24.1.K1.2C65.M, TS_BLOCK:3.24.1.K1.2C65.M;TM_AUTOREPEAT_I:2;, )
  RUN(RS232_CLOSE_2C652, "Close RS232 Port", ClosePort, DUT0:DEBUG:DEBUG.01, , )
END_GROUP

GROUP(LTE5_2C85_M_1) BEGIN

  RUN(RS232_OPEN_2C851, "Open RS232 Port", OpenPort, DUT0:DEBUG:DEBUG.02, , )
  RUN(3.24.M1.L5.2C85, "TX Spectrum LTE5 2C85 60W M FCC standard", mTxSpectrumMeas, DUT0:3.24.M1.L5.2C85, TS_BLOCK:3.24.M1.L5.2C85;TM_AUTOREPEAT_I:2;, )
  RUN(RS232_CLOSE_2C852, "Close RS232 Port", ClosePort, DUT0:DEBUG:DEBUG.01, , )

END_GROUP

GROUP(LTE5_2C30_H_1) BEGIN
  RUN(3.24.1.L5.2C30.H, "TX ACLR & Spectrum LTE5 2C30 H", mTxSpectrumMeas, DUT0:3.24.1.L5.2C30.H, TS_BLOCK:3.24.1.L5.2C30.H;TM_AUTOREPEAT_I:2;, )

END_GROUP

GROUP(LTE5_2C35_L_1) BEGIN

END_GROUP

GROUP(LTE5_2C35_M_1) BEGIN
  RUN(3.24.1.L5.2C35.M, "TX ACLR & Spectrum LTE5 2C35 M", mTxSpectrumMeas, DUT0:3.24.1.L5.2C35.M, TS_BLOCK:3.24.1.L5.2C35.M;TM_AUTOREPEAT_I:2;, )

END_GROUP

GROUP(LTE5_2C35_H_1) BEGIN

END_GROUP

GROUP(LTE5_2C45_L_1) BEGIN
  RUN(3.24.1.L5.2C45.L, "TX ACLR & Spectrum LTE5 2C45 L", mTxSpectrumMeas, DUT0:3.24.1.L5.2C45.L, TS_BLOCK:3.24.1.L5.2C45.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE5_2C45_H_1) BEGIN
  RUN(3.24.1.L5.2C45.H, "TX ACLR & Spectrum LTE5 2C45 H", mTxSpectrumMeas, DUT0:3.24.1.L5.2C45.H, TS_BLOCK:3.24.1.L5.2C45.H;TM_AUTOREPEAT_I:2;, )
END_GROUP


GROUP(LTE15_L_1) BEGIN
  RUN(3.24.1.L15.L, "TX ACLR & Spectrum LTE15 L", mTxSpectrumMeas, DUT0:3.24.1.L15.L, TS_BLOCK:3.24.1.L15.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE15_M_1) BEGIN
END_GROUP

GROUP(LTE15_H_1) BEGIN

  RUN(3.24.1.L15.H, "TX ACLR & Spectrum LTE15 H", mTxSpectrumMeas, DUT0:3.24.1.L15.H, TS_BLOCK:3.24.1.L15.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE20_L_1) BEGIN
  RUN(3.22.1.L20.L , "Temperature TOR", mAbsoluteTemp2, DUT0:3.22.1.L20.L, , )
  RUN(3.21.1.L20.L, "TX Output Power, VGA, Psat & Consumption", mTxPowerAndConsumptionMeas, DUT0:3.21.1.L20.L, TS_BLOCK:3.21.1.L20.L;TM_AUTOREPEAT_I:2;, )
  RUN(3.24.1.L20.L, "TX ACLR & Spectrum LTE20 L", mTxSpectrumMeas, DUT0:3.24.1.L20.L, TS_BLOCK:3.24.1.L20.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE20_M_1) BEGIN
  RUN(3.21.1.L20.M, "TX Output Power, VGA, Psat & Consumption", mTxPowerAndConsumptionMeas, DUT0:3.21.1.L20.M, TS_BLOCK:3.21.1.L20.M;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE20_H_1) BEGIN
  RUN(3.22.1.L20.H , "Temperature TOR", mAbsoluteTemp2, DUT0:3.22.1.L20.H, , )
  RUN(3.21.1.L20.H, "TX Output Power, VGA, Psat & Consumption", mTxPowerAndConsumptionMeas, DUT0:3.21.1.L20.H, TS_BLOCK:3.21.1.L20.H;TM_AUTOREPEAT_I:2;, )
  RUN(3.24.1.L20.H, "TX ACLR & Spectrum LTE20 H", mTxSpectrumMeas, DUT0:3.24.1.L20.H, TS_BLOCK:3.24.1.L20.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(GSM_L_1) BEGIN
  RUN(3.24.1.G1.L, "TX GSM ModSpec L", mTxSpectrumDueToMod, DUT0:3.24.1.G1.L, TS_BLOCK:3.24.1.G1.L;TM_AUTOREPEAT_I:2;, )
  RUN(3.24.1.1.G1.L, "TX GSM ModSpec -12 dB L", mTxSpectrumDueToMod, DUT0:3.24.1.1.G1.L, TS_BLOCK:3.24.1.1.G1.L;TM_AUTOREPEAT_I:2;, )
  RUN(3.24.1.2.G1.L, "TX GSM SwSpec L", mTxSpectrumDueToSwitching, DUT0:3.24.1.2.G1.L, TS_BLOCK:3.24.1.2.G1.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(GSM_H_1) BEGIN
  RUN(3.24.1.G1.H, "TX GSM ModSpec H", mTxSpectrumDueToMod, DUT0:3.24.1.G1.H, TS_BLOCK:3.24.1.G1.H;TM_AUTOREPEAT_I:2;, )
  RUN(3.24.1.1.G1.H, "TX GSM ModSpec -12 dB H", mTxSpectrumDueToMod, DUT0:3.24.1.1.G1.H, TS_BLOCK:3.24.1.1.G1.H;TM_AUTOREPEAT_I:2;, )
  RUN(3.24.1.2.G1.H, "TX GSM SwSpec H", mTxSpectrumDueToSwitching, DUT0:3.24.1.2.G1.H, TS_BLOCK:3.24.1.2.G1.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(GSM_4C1.4_L_1) BEGIN
  RUN(3.24.1.G4C14.L, "TX GSM ModSpec L", mTxSpectrumDueToMod, DUT0:3.24.1.G4C14.L, TS_BLOCK:3.24.1.G4C14.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(GSM_4C1.4_H_1) BEGIN
  RUN(3.24.1.G4C14.H, "TX GSM ModSpec H", mTxSpectrumDueToMod, DUT0:3.24.1.G4C14.H, TS_BLOCK:3.24.1.G4C14.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(GSM_2C20_M_1) BEGIN
  RUN(3.32.1.G2C20.M, "TX IM GSM 2c M", mTxIntermodulation, DUT0:3.32.1.G2C20.M, TS_BLOCK:3.32.1.G2C20.M;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(GSM_4C18.6_L_1) BEGIN
  RUN(3.32.1.G4C18.L, "TX IM GSM 4c L", mTxIntermodulation, DUT0:3.32.1.G4C18.L, TS_BLOCK:3.32.1.G4C18.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(GSM_4C18.6_M_1) BEGIN
  RUN(3.32.1.G4C18.M, "TX IM GSM 4c M", mTxIntermodulation, DUT0:3.32.1.G4C18.M, TS_BLOCK:3.32.1.G4C18.M;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(GSM_4C18.6_H_1) BEGIN
  RUN(3.32.1.G4C18.H, "TX IM GSM 4c H", mTxIntermodulation, DUT0:3.32.1.G4C18.H, TS_BLOCK:3.32.1.G4C18.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(GSM_4C40_L_1) BEGIN
  RUN(3.24.1.G4C40.L, "TX ACLR & Spectrum GSM L", mTxSpectrumMeas, DUT0:3.24.1.G4C40.L, TS_BLOCK:3.24.1.G4C40.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(GSM_4C40_H_1) BEGIN
  RUN(3.24.1.G4C40.H, "TX ACLR & Spectrum GSM H", mTxSpectrumMeas, DUT0:3.24.1.G4C40.H, TS_BLOCK:3.24.1.G4C40.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(WCDMA_L_1) BEGIN
  RUN(3.25.1.W.L, "TX EVM", mTxEvmUsingRefFile, DUT0:3.25.1.W.L, TS_BLOCK:3.25.1.W.L;, )
  RUN(3.25.2.W.L, "TX EVM no EQ", mTxEvmUsingRefFile, DUT0:3.25.2.W.L, TS_BLOCK:3.25.2.W.L;, )
  //RUN(3.24.1.W2C45.L, "TX Spectrum", mTxSpectrumMeas, DUT0:3.24.1.W2C45.L, TS_BLOCK:3.24.1.W2C45.L;TM_AUTOREPEAT_I:2;, )
  //RUN(3.24.1.W2C30.L, "TX Spectrum", mTxSpectrumMeas, DUT0:3.24.1.W2C30.L, TS_BLOCK:3.24.1.W2C30.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(WCDMA_M_1) BEGIN
  RUN(3.24.1.W2C5.M, "TX Spectrum", mTxSpectrumMeas, DUT0:3.24.1.W2C5.M, TS_BLOCK:3.24.1.W2C5.M;TM_AUTOREPEAT_I:2;, )
  RUN(3.24.1.W4C5.M, "TX Spectrum", mTxSpectrumMeas, DUT0:3.24.1.W4C5.M, TS_BLOCK:3.24.1.W4C5.M;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(WCDMA_H_1) BEGIN
  RUN(3.25.1.W.H, "TX EVM", mTxEvmUsingRefFile, DUT0:3.25.1.W.H, TS_BLOCK:3.25.1.W.H;, )
  RUN(3.25.2.W.H, "TX EVM no EQ", mTxEvmUsingRefFile, DUT0:3.25.2.W.H, TS_BLOCK:3.25.2.W.H;, )
  //RUN(3.24.1.W2C45.H, "TX Spectrum", mTxSpectrumMeas, DUT0:3.24.1.W2C45.L, TS_BLOCK:3.24.1.W2C45.H;TM_AUTOREPEAT_I:2;, )
  //RUN(3.24.1.W2C30.H, "TX Spectrum", mTxSpectrumMeas, DUT0:3.24.1.W2C30.L, TS_BLOCK:3.24.1.W2C30.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(TXPERF_2) BEGIN
  DO(STATECACHE_ENABLE)
  DO(RFMUX_INIT)
  RUN(CHPWRCL2P, "Change to Power Class 2", mChangePowerClass, DUT0:CHPWRCL2P, , )
  DO(LTE20_L_2, TS_BLOCK:LTE20_L_2:LTE20_2;, )
  DO(LTE20_M_2, TS_BLOCK:LTE20_M_2:LTE20_2;, )
  DO(LTE20_H_2, TS_BLOCK:LTE20_H_2:LTE20_2;, )
  DO(LTE5_H_2, TS_BLOCK:LTE5_H_2:LTE5_2;, )
  DO(LTE5_M_2, TS_BLOCK:LTE5_M_2:LTE5_2;, )
  DO(LTE5_L_2, TS_BLOCK:LTE5_L_2:LTE5_2;, )

  DO(TXOFF)
  DO(STATECACHE_DISABLE)
END_GROUP

GROUP(LTE5_L_2) BEGIN
  RUN(3.22.2.L5.L , "Temperature TOR", mAbsoluteTemp2, DUT0:3.22.2.L5.L, , )
  RUN(3.21.2.L5.L, "TX Output Power, VGA, Psat & Consumption 40W", mTxPowerAndConsumptionMeas, DUT0:3.21.2.L5.L, TS_BLOCK:3.21.2.L5.L;TS_AUTOREPEAT:2;, )
  RUN(3.27.1.L5.L, "TX Consumption Greensheet 40W", mTxPowerAndConsumptionMeas, DUT0:3.27.1.L5.L, TS_BLOCK:3.27.1.L5.L;, )
  RUN(3.24.2.L5.L, "TX ACLR LTE5 L", mTxSpectrumMeas, DUT0:3.24.2.L5.L, TS_BLOCK:3.24.2.L5.L;TM_AUTOREPEAT_I:2;, )
  //RUN(3.24.2.K5.L, "TX Spectrum FCC", mTxSpectrumMeas, DUT0:3.24.2.K5.L, TS_BLOCK:3.24.2.K5.L;TM_AUTOREPEAT_I:2;, )
  RUN(3.29.2.L5.L, "TX Psat LTE5 L", mTxPowerAndConsumptionMeas, DUT0:3.29.2.L5.L, TS_BLOCK:3.29.2.L5.L;, )
  RUN(3.29.2.L5.L1, "TX Psat LTE5 L+1", mTxPowerAndConsumptionMeas, DUT0:3.29.2.L5.L1, TS_BLOCK:3.29.2.L5.L1;, )
END_GROUP

GROUP(LTE5_M_2) BEGIN
  RUN(3.21.2.L5.M, "TX Output Power, VGA, Psat & Consumption 40W", mTxPowerAndConsumptionMeas, DUT0:3.21.2.L5.M, TS_BLOCK:3.21.2.L5.M;TS_AUTOREPEAT:2;, )
  RUN(3.27.1.L5.M, "TX Consumption Greensheet 40W", mTxPowerAndConsumptionMeas, DUT0:3.27.1.L5.M, TS_BLOCK:3.27.1.L5.M;, )
  RUN(3.24.2.L5.M, "TX ACLR LTE5 M", mTxSpectrumMeas, DUT0:3.24.2.L5.M, TS_BLOCK:3.24.2.L5.M;TM_AUTOREPEAT_I:2;, )
  RUN(3.24.2.L5.2C50.M, "TX ACLR & Spectrum LTE5 2C50", mTxSpectrumMeas, DUT0:3.24.2.L5.2C50.M, TS_BLOCK:3.24.2.L5.2C50.M;TM_AUTOREPEAT_I:2;, )
  //RUN(3.24.2.K5.M, "TX Spectrum FCC", mTxSpectrumMeas, DUT0:3.24.2.K5.M, TS_BLOCK:3.24.2.K5.M;TM_AUTOREPEAT_I:2;, )
  RUN(3.29.2.L5.M, "TX Psat LTE5 M", mTxPowerAndConsumptionMeas, DUT0:3.29.2.L5.M, TS_BLOCK:3.29.2.L5.M;, )
END_GROUP

GROUP(LTE5_H_2) BEGIN
  RUN(3.22.2.L5.H , "Temperature TOR", mAbsoluteTemp2, DUT0:3.22.2.L5.H, , )
  RUN(3.21.2.L5.H, "TX Output Power, VGA, Psat & Consumption 40W", mTxPowerAndConsumptionMeas, DUT0:3.21.2.L5.H, TS_BLOCK:3.21.2.L5.H;TS_AUTOREPEAT:2;, )
  RUN(3.27.1.L5.H, "TX Consumption Greensheet 40W", mTxPowerAndConsumptionMeas, DUT0:3.27.1.L5.H, TS_BLOCK:3.27.1.L5.H;, )
  RUN(3.24.2.L5.H, "TX ACLR LTE5 H", mTxSpectrumMeas, DUT0:3.24.2.L5.H, TS_BLOCK:3.24.2.L5.H;TM_AUTOREPEAT_I:2;, )
  //RUN(3.24.2.K5.H, "TX Spectrum FCC", mTxSpectrumMeas, DUT0:3.24.2.K5.H, TS_BLOCK:3.24.2.K5.H;TM_AUTOREPEAT_I:2;, )
  RUN(3.29.2.L5.H, "TX Psat LTE5 H", mTxPowerAndConsumptionMeas, DUT0:3.29.2.L5.H, TS_BLOCK:3.29.2.L5.H;, )
  RUN(3.29.2.L5.H1, "TX Psat LTE5 H-1", mTxPowerAndConsumptionMeas, DUT0:3.29.2.L5.H1, TS_BLOCK:3.29.2.L5.H1;, )
END_GROUP

GROUP(LTE10_L_2) BEGIN
  RUN(3.27.2.L10.L, "TX Consumption Greensheet", mTxPowerAndConsumptionMeas, DUT0:3.27.2.L10.L, TS_BLOCK:3.27.2.L10.L;, )
END_GROUP

GROUP(LTE10_H_2) BEGIN
  RUN(3.27.2.L10.H, "TX Consumption Greensheet", mTxPowerAndConsumptionMeas, DUT0:3.27.2.L10.H, TS_BLOCK:3.27.2.L10.H;, )
END_GROUP

GROUP(LTE5_2C10_L_2) BEGIN
  RUN(3.24.2.L5.2C10.L, "TX ACLR & Spectrum LTE5 2C10 L", mTxSpectrumMeas, DUT0:3.24.2.L5.2C10.L, TS_BLOCK:3.24.2.L5.2C10.L;TM_AUTOREPEAT_I:2;, )

END_GROUP

GROUP(LTE5_2C10_H_2) BEGIN
  RUN(3.24.2.L5.2C10.H, "TX ACLR & Spectrum LTE5 2C10 H", mTxSpectrumMeas, DUT0:3.24.2.L5.2C10.H, TS_BLOCK:3.24.2.L5.2C10.H;TM_AUTOREPEAT_I:2;, )

END_GROUP

GROUP(LTE5_2C20_L_2) BEGIN
  RUN(3.24.2.L5.2C20.L, "TX ACLR & Spectrum LTE5 2C20 L", mTxSpectrumMeas, DUT0:3.24.2.L5.2C20.L, TS_BLOCK:3.24.2.L5.2C20.L;TM_AUTOREPEAT_I:2;, )

END_GROUP

GROUP(LTE5_2C20_H_2) BEGIN
  RUN(3.24.2.L5.2C20.H, "TX ACLR & Spectrum LTE5 2C20 H", mTxSpectrumMeas, DUT0:3.24.2.L5.2C20.H, TS_BLOCK:3.24.2.L5.2C20.H;TM_AUTOREPEAT_I:2;, )

END_GROUP

GROUP(LTE5_2C30_L_2) BEGIN
  RUN(3.24.2.L5.2C30.L, "TX ACLR & Spectrum LTE5 2C30 L", mTxSpectrumMeas, DUT0:3.24.2.L5.2C30.L, TS_BLOCK:3.24.2.L5.2C30.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE5_2C30_M_2) BEGIN
  RUN(3.24.2.L5.2C30.M, "TX ACLR & Spectrum LTE5 2C30 M", mTxSpectrumMeas, DUT0:3.24.2.L5.2C30.M, TS_BLOCK:3.24.2.L5.2C30.M;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE5_2C85_M_2) BEGIN

  RUN(RS232_OPEN_2C852, "Close RS232 Port", OpenPort, DUT0:DEBUG:DEBUG.02, , )
  RUN(3.24.M2.L5.2C85, "TX ACLR & Spectrum LTE5 2C85 40W M FCC standard", mTxSpectrumMeas, DUT0:3.24.M2.L5.2C85, TS_BLOCK:3.24.M2.L5.2C85;TM_AUTOREPEAT_I:2;, )
  RUN(RS232_CLOSE_2C852, "Close RS232 Port", ClosePort, DUT0:DEBUG:DEBUG.01, , )
END_GROUP

GROUP(LTE5_2C65_M_2) BEGIN

  RUN(RS232_OPEN_2C652, "Close RS232 Port", OpenPort, DUT0:DEBUG:DEBUG.02, , )
  RUN(3.24.2.K2.2C65.M, "TX Spectrum LTE5 2C65 M FCC standard", mTxSpectrumMeas, DUT0:3.24.2.K2.2C65.M, TS_BLOCK:3.24.2.K2.2C65.M;TM_AUTOREPEAT_I:2;, )
  RUN(RS232_CLOSE_2C652, "Close RS232 Port", ClosePort, DUT0:DEBUG:DEBUG.01, , )
END_GROUP

GROUP(LTE5_2C30_H_2) BEGIN
  RUN(3.24.2.L5.2C30.H, "TX ACLR & Spectrum LTE5 2C30 H", mTxSpectrumMeas, DUT0:3.24.2.L5.2C30.H, TS_BLOCK:3.24.2.L5.2C30.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE5_2C35_L_2) BEGIN
  RUN(3.24.2.L5.2C35.L, "TX ACLR & Spectrum LTE5 2C35 L", mTxSpectrumMeas, DUT0:3.24.2.L5.2C35.L, TS_BLOCK:3.24.2.L5.2C35.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE5_2C35_M_2) BEGIN
  RUN(3.24.2.L5.2C35.M, "TX ACLR & Spectrum LTE5 2C35 M", mTxSpectrumMeas, DUT0:3.24.2.L5.2C35.M, TS_BLOCK:3.24.2.L5.2C35.M;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE5_2C35_H_2) BEGIN
  RUN(3.24.2.L5.2C35.H, "TX ACLR & Spectrum LTE5 2C35 H", mTxSpectrumMeas, DUT0:3.24.2.L5.2C35.H, TS_BLOCK:3.24.2.L5.2C35.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE5_2C45_L_2) BEGIN
  RUN(3.24.2.L5.2C45.L, "TX ACLR & Spectrum LTE5 2C45 L", mTxSpectrumMeas, DUT0:3.24.2.L5.2C45.L, TS_BLOCK:3.24.2.L5.2C45.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE5_2C45_H_2) BEGIN
  RUN(3.24.2.L5.2C45.H, "TX ACLR & Spectrum LTE5 2C45 H", mTxSpectrumMeas, DUT0:3.24.2.L5.2C45.H, TS_BLOCK:3.24.2.L5.2C45.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE15_L_2) BEGIN

  RUN(3.24.2.L20.L, "TX ACLR & Spectrum LTE15 L", mTxSpectrumMeas, DUT0:3.24.2.L15.L, TS_BLOCK:3.24.2.L15.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE15_M_2) BEGIN
END_GROUP

GROUP(LTE15_H_2) BEGIN

  RUN(3.24.2.L15.H, "TX ACLR & Spectrum LTE15 H", mTxSpectrumMeas, DUT0:3.24.2.L15.H, TS_BLOCK:3.24.2.L15.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE20_L_2) BEGIN
  RUN(3.22.2.L20.L , "Temperature TOR", mAbsoluteTemp2, DUT0:3.22.2.L20.L, , )
  RUN(3.21.2.L20.L, "TX Output Power, VGA, Psat & Consumption", mTxPowerAndConsumptionMeas, DUT0:3.21.2.L20.L, TS_BLOCK:3.21.2.L20.L;TS_AUTOREPEAT:2;, )
  RUN(3.24.2.L20.L, "TX ACLR & Spectrum LTE20 L", mTxSpectrumMeas, DUT0:3.24.2.L20.L, TS_BLOCK:3.24.2.L20.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE20_M_2) BEGIN
  RUN(3.21.2.L20.M, "TX Output Power, VGA, Psat & Consumption", mTxPowerAndConsumptionMeas, DUT0:3.21.2.L20.M, TS_BLOCK:3.21.2.L20.M;TS_AUTOREPEAT:2;, )
END_GROUP

GROUP(LTE20_H_2) BEGIN
  RUN(3.22.2.L20.H , "Temperature TOR", mAbsoluteTemp2, DUT0:3.22.2.L20.H, , )
  RUN(3.21.2.L20.H, "TX Output Power, VGA, Psat & Consumption", mTxPowerAndConsumptionMeas, DUT0:3.21.2.L20.H, TS_BLOCK:3.21.2.L20.H;TS_AUTOREPEAT:2;, )
  RUN(3.24.2.L20.H, "TX ACLR & Spectrum LTE20 H", mTxSpectrumMeas, DUT0:3.24.2.L20.H, TS_BLOCK:3.24.2.L20.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE1.4_L_2) BEGIN
  RUN(3.24.2.L1_4.L, "TX ACLR & Spectrum LTE1.4 L", mTxSpectrumMeas, DUT0:3.24.2.L1_4.L, TS_BLOCK:3.24.2.L1_4.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE1.4_H_2) BEGIN
  RUN(3.24.2.L1_4.H, "TX ACLR & Spectrum LTE1.4 H", mTxSpectrumMeas, DUT0:3.24.2.L1_4.H, TS_BLOCK:3.24.2.L1_4.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(GSM_4C18.6_L_2) BEGIN
  RUN(3.32.2.G4C18.L, "TX IM GSM 4c L", mTxIntermodulation, DUT0:3.32.2.G4C18.L, TS_BLOCK:3.32.2.G4C18.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(GSM_4C18.6_M_2) BEGIN
  RUN(3.32.2.G4C18.M, "TX IM GSM 4c M", mTxIntermodulation, DUT0:3.32.2.G4C18.M, TS_BLOCK:3.32.2.G4C18.M;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(GSM_4C18.6_H_2) BEGIN
  RUN(3.32.2.G4C18.H, "TX IM GSM 4c H", mTxIntermodulation, DUT0:3.32.2.G4C18.H, TS_BLOCK:3.32.2.G4C18.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(GSM_4C40_L_2) BEGIN
  RUN(3.24.2.G4C40.L, "TX ACLR & Spectrum GSM L", mTxSpectrumMeas, DUT0:3.24.2.G4C40.L, TS_BLOCK:3.24.2.G4C40.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(GSM_4C40_H_2) BEGIN
  RUN(3.24.2.G4C40.H, "TX ACLR & Spectrum GSM H", mTxSpectrumMeas, DUT0:3.24.2.G4C40.H, TS_BLOCK:3.24.2.G4C40.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(TXPERF_3) BEGIN
  DO(STATECACHE_ENABLE)
  DO(RFMUX_INIT)
  RUN(CHPWRCL3P, "Change to Power Class 3", mChangePowerClass, DUT0:CHPWRCL3P, , )
  DO(LTE20_L_3, TS_BLOCK:LTE20_L_3:LTE20_3;, )
  DO(LTE20_M_3, TS_BLOCK:LTE20_M_3:LTE20_3;, )
  DO(LTE20_H_3, TS_BLOCK:LTE20_H_3:LTE20_3;, )
  DO(LTE5_H_3, TS_BLOCK:LTE5_H_3:LTE5_3;, )
  DO(LTE5_M_3, TS_BLOCK:LTE5_M_3:LTE5_3;, )
  DO(LTE5_L_3, TS_BLOCK:LTE5_L_3:LTE5_3;, )

  DO(TXOFF)
  DO(STATECACHE_DISABLE)
END_GROUP

GROUP(LTE5_L_3) BEGIN
  RUN(3.22.3.L5.L , "Temperature TOR", mAbsoluteTemp2, DUT0:3.22.3.L5.L, , )
  RUN(3.21.3.L5.L, "TX Output Power, VGA, Psat & Consumption 20W", mTxPowerAndConsumptionMeas, DUT0:3.21.3.L5.L, TS_BLOCK:3.21.3.L5.L;TS_AUTOREPEAT:2;, )
  RUN(3.24.3.L5.L, "TX ACLR LTE5 L", mTxSpectrumMeas, DUT0:3.24.3.L5.L, TS_BLOCK:3.24.3.L5.L;TM_AUTOREPEAT_I:2;, )

  RUN(3.27.3.L5.L, "TX Consumption Greensheet 20W", mTxPowerAndConsumptionMeas, DUT0:3.27.3.L5.L, TS_BLOCK:3.27.3.L5.L;, )
  RUN(3.29.3.L5.L, "TX Psat LTE5 L", mTxPowerAndConsumptionMeas, DUT0:3.29.3.L5.L, TS_BLOCK:3.29.3.L5.L;, )
  RUN(3.29.3.L5.L1, "TX Psat LTE5 L+1", mTxPowerAndConsumptionMeas, DUT0:3.29.3.L5.L1, TS_BLOCK:3.29.3.L5.L1;, )
END_GROUP

GROUP(LTE5_M_3) BEGIN
  RUN(3.21.3.L5.M, "TX Output Power, VGA, Psat & Consumption 20W", mTxPowerAndConsumptionMeas, DUT0:3.21.3.L5.M, TS_BLOCK:3.21.3.L5.M;TS_AUTOREPEAT:2;, )
  RUN(3.24.3.L5.M, "TX ACLR LTE5 M", mTxSpectrumMeas, DUT0:3.24.3.L5.M, TS_BLOCK:3.24.3.L5.M;TM_AUTOREPEAT_I:2;, )
  RUN(3.24.3.L5.2C50.M, "TX ACLR & Spectrum LTE5 2C50", mTxSpectrumMeas, DUT0:3.24.3.L5.2C50.M, TS_BLOCK:3.24.3.L5.2C50.M;TM_AUTOREPEAT_I:2;, )
  RUN(3.27.3.L5.M, "TX Consumption Greensheet 20W", mTxPowerAndConsumptionMeas, DUT0:3.27.3.L5.M, TS_BLOCK:3.27.3.L5.M;, )
  RUN(3.29.3.L5.M, "TX Psat LTE5 M", mTxPowerAndConsumptionMeas, DUT0:3.29.3.L5.M, TS_BLOCK:3.29.3.L5.M;, )
END_GROUP

GROUP(LTE5_H_3) BEGIN
  RUN(3.22.3.L5.H , "Temperature TOR", mAbsoluteTemp2, DUT0:3.22.3.L5.H, , )
  RUN(3.21.3.L5.H, "TX Output Power, VGA, Psat & Consumption 20W", mTxPowerAndConsumptionMeas, DUT0:3.21.3.L5.H, TS_BLOCK:3.21.3.L5.H;TS_AUTOREPEAT:2;, )
  RUN(3.24.3.L5.H, "TX ACLR LTE5 H", mTxSpectrumMeas, DUT0:3.24.3.L5.H, TS_BLOCK:3.24.3.L5.H;TM_AUTOREPEAT_I:2;, )
  RUN(3.27.3.L5.H, "TX Consumption Greensheet 20W", mTxPowerAndConsumptionMeas, DUT0:3.27.3.L5.H, TS_BLOCK:3.27.3.L5.H;, )
  RUN(3.29.3.L5.H, "TX Psat LTE5 H", mTxPowerAndConsumptionMeas, DUT0:3.29.3.L5.H, TS_BLOCK:3.29.3.L5.H;, )
  RUN(3.29.3.L5.H1, "TX Psat LTE5 H-1", mTxPowerAndConsumptionMeas, DUT0:3.29.3.L5.H1, TS_BLOCK:3.29.3.L5.H1;, )
END_GROUP

GROUP(LTE10_L_3) BEGIN
  RUN(3.27.3.L10.L, "TX Consumption Greensheet", mTxPowerAndConsumptionMeas, DUT0:3.27.3.L10.L, TS_BLOCK:3.27.3.L10.L;, )

END_GROUP

GROUP(LTE10_H_3) BEGIN
  RUN(3.27.3.L10.H, "TX Consumption Greensheet", mTxPowerAndConsumptionMeas, DUT0:3.27.3.L10.H, TS_BLOCK:3.27.3.L10.H;, )
END_GROUP


GROUP(LTE5_2C10_L_3) BEGIN
  RUN(3.24.3.L5.2C10.L, "TX ACLR & Spectrum LTE5 2C10 L", mTxSpectrumMeas, DUT0:3.24.3.L5.2C10.L, TS_BLOCK:3.24.3.L5.2C10.L;TM_AUTOREPEAT_I:2;, )

END_GROUP

GROUP(LTE5_2C10_H_3) BEGIN
  RUN(3.24.3.L5.2C10.H, "TX ACLR & Spectrum LTE5 2C10 H", mTxSpectrumMeas, DUT0:3.24.3.L5.2C10.H, TS_BLOCK:3.24.3.L5.2C10.H;TM_AUTOREPEAT_I:2;, )

END_GROUP

GROUP(LTE5_2C20_L_3) BEGIN
  RUN(3.24.3.L5.2C20.L, "TX ACLR & Spectrum LTE5 2C20 L", mTxSpectrumMeas, DUT0:3.24.3.L5.2C20.L, TS_BLOCK:3.24.3.L5.2C20.L;TM_AUTOREPEAT_I:2;, )

END_GROUP

GROUP(LTE5_2C20_H_3) BEGIN
  RUN(3.24.3.L5.2C20.H, "TX ACLR & Spectrum LTE5 2C20 H", mTxSpectrumMeas, DUT0:3.24.3.L5.2C20.H, TS_BLOCK:3.24.3.L5.2C20.H;TM_AUTOREPEAT_I:2;, )

END_GROUP

GROUP(LTE5_2C30_L_3) BEGIN
  RUN(3.24.3.L5.2C30.L, "TX ACLR & Spectrum LTE5 2C30 L", mTxSpectrumMeas, DUT0:3.24.3.L5.2C30.L, TS_BLOCK:3.24.3.L5.2C30.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE5_2C30_M_3) BEGIN
  RUN(3.24.3.L5.2C30.M, "TX ACLR & Spectrum LTE5 2C30 M", mTxSpectrumMeas, DUT0:3.24.3.L5.2C30.M, TS_BLOCK:3.24.3.L5.2C30.M;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE5_2C30_H_3) BEGIN
  RUN(3.24.3.L5.2C30.H, "TX ACLR & Spectrum LTE5 2C30 H", mTxSpectrumMeas, DUT0:3.24.3.L5.2C30.H, TS_BLOCK:3.24.3.L5.2C30.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE5_2C35_L_3) BEGIN
  RUN(3.24.3.L5.2C35.L, "TX ACLR & Spectrum LTE5 2C35 L", mTxSpectrumMeas, DUT0:3.24.3.L5.2C35.L, TS_BLOCK:3.24.3.L5.2C35.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE5_2C35_M_3) BEGIN
  RUN(3.24.3.L5.2C35.M, "TX ACLR & Spectrum LTE5 2C35 M", mTxSpectrumMeas, DUT0:3.24.3.L5.2C35.M, TS_BLOCK:3.24.3.L5.2C35.M;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE5_2C35_H_3) BEGIN
  RUN(3.24.3.L5.2C35.H, "TX ACLR & Spectrum LTE5 2C35 H", mTxSpectrumMeas, DUT0:3.24.3.L5.2C35.H, TS_BLOCK:3.24.3.L5.2C35.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE5_2C45_L_3) BEGIN
  RUN(3.24.3.L5.2C45.L, "TX ACLR & Spectrum LTE5 2C45 L", mTxSpectrumMeas, DUT0:3.24.3.L5.2C45.L, TS_BLOCK:3.24.3.L5.2C45.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE5_2C45_H_3) BEGIN
  RUN(3.24.3.L5.2C45.H, "TX ACLR & Spectrum LTE5 2C45 H", mTxSpectrumMeas, DUT0:3.24.3.L5.2C45.H, TS_BLOCK:3.24.3.L5.2C45.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE5_2C65_M_3) BEGIN

  RUN(RS232_OPEN_2C653, "Close RS232 Port", OpenPort, DUT0:DEBUG:DEBUG.02, , )
  RUN(3.24.3.K3.2C65.M, "TX Spectrum LTE5 2C65 M FCC standard", mTxSpectrumMeas, DUT0:3.24.3.K3.2C65.M, TS_BLOCK:3.24.3.K3.2C65.M;TM_AUTOREPEAT_I:2;, )
  RUN(RS232_CLOSE_2C653, "Close RS232 Port", ClosePort, DUT0:DEBUG:DEBUG.01, , )
END_GROUP

GROUP(LTE5_2C85_M_3) BEGIN
  RUN(3.24.3.L5.2C85.M, "TX ACLR LTE5 2C85 20W M", mTxSpectrumMeas, DUT0:3.24.3.L5.2C85.M, TS_BLOCK:3.24.3.L5.2C85.M;TM_AUTOREPEAT_I:2;, )
  RUN(RS232_OPEN_2C853, "Close RS232 Port", OpenPort, DUT0:DEBUG:DEBUG.02, , )
  RUN(3.24.M3.L5.2C85, "TX Spectrum LTE5 2C85 20W M FCC standard", mTxSpectrumMeas, DUT0:3.24.M3.L5.2C85, TS_BLOCK:3.24.M3.L5.2C85;TM_AUTOREPEAT_I:2;, )
  RUN(RS232_CLOSE_2C853, "Close RS232 Port", ClosePort, DUT0:DEBUG:DEBUG.01, , )
END_GROUP

GROUP(LTE15_L_3) BEGIN

  RUN(3.24.3.L15.L, "TX ACLR & Spectrum LTE15 L", mTxSpectrumMeas, DUT0:3.24.3.L15.L, TS_BLOCK:3.24.3.L15.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE15_M_3) BEGIN
END_GROUP

GROUP(LTE15_H_3) BEGIN

  RUN(3.24.3.L15.H, "TX ACLR & Spectrum LTE15 H", mTxSpectrumMeas, DUT0:3.24.3.L15.H, TS_BLOCK:3.24.3.L15.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE20_L_3) BEGIN
  RUN(3.22.3.L20.L , "Temperature TOR", mAbsoluteTemp2, DUT0:3.22.3.L20.L, , )
  RUN(3.21.3.L20.L, "TX Output Power, VGA, Psat & Consumption", mTxPowerAndConsumptionMeas, DUT0:3.21.3.L20.L, TS_BLOCK:3.21.3.L20.L;TS_AUTOREPEAT:2;, )
  RUN(3.24.3.L20.L, "TX ACLR & Spectrum LTE20 L", mTxSpectrumMeas, DUT0:3.24.3.L20.L, TS_BLOCK:3.24.3.L20.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE20_M_3) BEGIN
  RUN(3.21.3.L20.M, "TX Output Power, VGA, Psat & Consumption", mTxPowerAndConsumptionMeas, DUT0:3.21.3.L20.M, TS_BLOCK:3.21.3.L20.M;TS_AUTOREPEAT:2;, )
END_GROUP

GROUP(LTE20_H_3) BEGIN
  RUN(3.22.3.L20.H , "Temperature TOR", mAbsoluteTemp2, DUT0:3.22.3.L20.H, , )
  RUN(3.21.3.L20.H, "TX Output Power, VGA, Psat & Consumption", mTxPowerAndConsumptionMeas, DUT0:3.21.3.L20.H, TS_BLOCK:3.21.3.L20.H;TS_AUTOREPEAT:2;, )
  RUN(3.24.3.L20.H, "TX ACLR & Spectrum LTE20 H", mTxSpectrumMeas, DUT0:3.24.3.L20.H, TS_BLOCK:3.24.3.L20.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE1.4_L_3) BEGIN
  RUN(3.24.3.L1_4.L, "TX ACLR & Spectrum LTE1.4 L", mTxSpectrumMeas, DUT0:3.24.3.L1_4.L, TS_BLOCK:3.24.3.L1_4.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE1.4_H_3) BEGIN
  RUN(3.24.3.L1_4.H, "TX ACLR & Spectrum LTE1.4 H", mTxSpectrumMeas, DUT0:3.24.3.L1_4.H, TS_BLOCK:3.24.3.L1_4.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(GSM_4C18.6_L_3) BEGIN
  RUN(3.32.3.G4C18.L, "TX IM GSM 4c L", mTxIntermodulation, DUT0:3.32.3.G4C18.L, TS_BLOCK:3.32.3.G4C18.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(GSM_4C18.6_M_3) BEGIN
  RUN(3.32.3.G4C18.M, "TX IM GSM 4c M", mTxIntermodulation, DUT0:3.32.3.G4C18.M, TS_BLOCK:3.32.3.G4C18.M;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(GSM_4C18.6_H_3) BEGIN
  RUN(3.32.3.G4C18.H, "TX IM GSM 4c H", mTxIntermodulation, DUT0:3.32.3.G4C18.H, TS_BLOCK:3.32.3.G4C18.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(GSM_4C40_L_3) BEGIN
  RUN(3.24.3.G4C40.L, "TX ACLR & Spectrum GSM L", mTxSpectrumMeas, DUT0:3.24.3.G4C40.L, TS_BLOCK:3.24.3.G4C40.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(GSM_4C40_H_3) BEGIN
  RUN(3.24.3.G4C40.H, "TX ACLR & Spectrum GSM H", mTxSpectrumMeas, DUT0:3.24.3.G4C40.H, TS_BLOCK:3.24.3.G4C40.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(TXPERF_4) BEGIN
  DO(STATECACHE_ENABLE)
  DO(RFMUX_INIT)
  RUN(CHPWRCL4P, "Change to Power Class 4", mChangePowerClass, DUT0:CHPWRCL4P, , )
  DO(LTE20_L_4, TS_BLOCK:LTE20_L_4:LTE20_4;, )
  DO(LTE20_M_4, TS_BLOCK:LTE20_M_4:LTE20_4;, )
  DO(LTE20_H_4, TS_BLOCK:LTE20_H_4:LTE20_4;, )
  DO(LTE5_H_4, TS_BLOCK:LTE5_H_4:LTE5_4;, )
  DO(LTE5_M_4, TS_BLOCK:LTE5_M_4:LTE5_4;, )
  DO(LTE5_L_4, TS_BLOCK:LTE5_L_4:LTE5_4;, )

  DO(TXOFF)
  DO(STATECACHE_DISABLE)
END_GROUP

GROUP(LTE5_L_4) BEGIN
  RUN(3.22.4.L5.L , "Temperature TOR", mAbsoluteTemp2, DUT0:3.22.4.L5.L, , )
  RUN(3.21.4.L5.L, "TX Output Power, VGA, Psat & Consumption 10W", mTxPowerAndConsumptionMeas, DUT0:3.21.4.L5.L, TS_BLOCK:3.21.4.L5.L;TS_AUTOREPEAT:2;, )
  RUN(3.24.4.L5.L, "TX ACLR LTE5 L", mTxSpectrumMeas, DUT0:3.24.4.L5.L, TS_BLOCK:3.24.4.L5.L;TM_AUTOREPEAT_I:2;, )

  RUN(3.27.4.L5.L, "TX Consumption Greensheet 10W", mTxPowerAndConsumptionMeas, DUT0:3.27.4.L5.L, TS_BLOCK:3.27.4.L5.L;, )
  RUN(3.29.4.L5.L, "TX Psat LTE5 L", mTxPowerAndConsumptionMeas, DUT0:3.29.4.L5.L, TS_BLOCK:3.29.4.L5.L;, )
  RUN(3.29.4.L5.L1, "TX Psat LTE5 L+1", mTxPowerAndConsumptionMeas, DUT0:3.29.4.L5.L1, TS_BLOCK:3.29.4.L5.L1;, )
END_GROUP

GROUP(LTE5_M_4) BEGIN
  RUN(3.21.4.L5.M, "TX Output Power, VGA, Psat & Consumption 10W", mTxPowerAndConsumptionMeas, DUT0:3.21.4.L5.M, TS_BLOCK:3.21.4.L5.M;TS_AUTOREPEAT:2;, )
  RUN(3.24.4.L5.M, "TX ACLR LTE5 M", mTxSpectrumMeas, DUT0:3.24.4.L5.M, TS_BLOCK:3.24.4.L5.M;TM_AUTOREPEAT_I:2;, )
  RUN(3.24.4.L5.2C50.M, "TX ACLR & Spectrum LTE5 2C50", mTxSpectrumMeas, DUT0:3.24.4.L5.2C50.M, TS_BLOCK:3.24.4.L5.2C50.M;TM_AUTOREPEAT_I:2;, )
  RUN(3.27.4.L5.M, "TX Consumption Greensheet 10W", mTxPowerAndConsumptionMeas, DUT0:3.27.4.L5.M, TS_BLOCK:3.27.4.L5.M;, )
  RUN(3.29.4.L5.M, "TX Psat LTE5 M", mTxPowerAndConsumptionMeas, DUT0:3.29.4.L5.M, TS_BLOCK:3.29.4.L5.M;, )
END_GROUP

GROUP(LTE5_H_4) BEGIN
  RUN(3.22.4.L5.H , "Temperature TOR", mAbsoluteTemp2, DUT0:3.22.4.L5.H, , )
  RUN(3.21.4.L5.H, "TX Output Power, VGA, Psat & Consumption 10W", mTxPowerAndConsumptionMeas, DUT0:3.21.4.L5.H, TS_BLOCK:3.21.4.L5.H;TS_AUTOREPEAT:2;, )
  RUN(3.24.4.L5.H, "TX ACLR LTE5 H", mTxSpectrumMeas, DUT0:3.24.4.L5.H, TS_BLOCK:3.24.4.L5.H;TM_AUTOREPEAT_I:2;, )

  RUN(3.27.4.L5.H, "TX Consumption Greensheet 10W", mTxPowerAndConsumptionMeas, DUT0:3.27.4.L5.H, TS_BLOCK:3.27.4.L5.H;, )
  RUN(3.29.4.L5.H, "TX Psat LTE5 H", mTxPowerAndConsumptionMeas, DUT0:3.29.4.L5.H, TS_BLOCK:3.29.4.L5.H;, )
  RUN(3.29.4.L5.H1, "TX Psat LTE5 H-1", mTxPowerAndConsumptionMeas, DUT0:3.29.4.L5.H1, TS_BLOCK:3.29.4.L5.H1;, )
END_GROUP

GROUP(LTE10_L_4) BEGIN
  RUN(3.27.4.L10.L, "TX Consumption Greensheet", mTxPowerAndConsumptionMeas, DUT0:3.27.4.L10.L, TS_BLOCK:3.27.4.L10.L;, )

END_GROUP

GROUP(LTE10_H_4) BEGIN
  RUN(3.27.4.L10.H, "TX Consumption Greensheet", mTxPowerAndConsumptionMeas, DUT0:3.27.4.L10.H, TS_BLOCK:3.27.4.L10.H;, )

END_GROUP

GROUP(LTE5_2C30_L_4) BEGIN
  RUN(3.24.4.L5.2C30.L, "TX ACLR & Spectrum LTE5 2C30 L", mTxSpectrumMeas, DUT0:3.24.4.L5.2C30.L, TS_BLOCK:3.24.4.L5.2C30.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE5_2C30_M_4) BEGIN
  RUN(3.24.4.L5.2C30.M, "TX ACLR & Spectrum LTE5 2C30 M", mTxSpectrumMeas, DUT0:3.24.4.L5.2C30.M, TS_BLOCK:3.24.4.L5.2C30.M;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE5_2C30_H_4) BEGIN
  RUN(3.24.4.L5.2C30.H, "TX ACLR & Spectrum LTE5 2C30 H", mTxSpectrumMeas, DUT0:3.24.4.L5.2C30.H, TS_BLOCK:3.24.4.L5.2C30.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE5_2C35_L_4) BEGIN
  RUN(3.24.4.L5.2C35.L, "TX ACLR & Spectrum LTE5 2C35 L", mTxSpectrumMeas, DUT0:3.24.4.L5.2C35.L, TS_BLOCK:3.24.4.L5.2C35.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE5_2C35_M_4) BEGIN
  RUN(3.24.4.L5.2C35.M, "TX ACLR & Spectrum LTE5 2C35 M", mTxSpectrumMeas, DUT0:3.24.4.L5.2C35.M, TS_BLOCK:3.24.4.L5.2C35.M;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE5_2C35_H_4) BEGIN
  RUN(3.24.4.L5.2C35.H, "TX ACLR & Spectrum LTE5 2C35 H", mTxSpectrumMeas, DUT0:3.24.4.L5.2C35.H, TS_BLOCK:3.24.4.L5.2C35.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE5_2C45_L_4) BEGIN
  RUN(3.24.4.L5.2C45.L, "TX ACLR & Spectrum LTE5 2C45 L", mTxSpectrumMeas, DUT0:3.24.4.L5.2C45.L, TS_BLOCK:3.24.4.L5.2C45.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE5_2C45_H_4) BEGIN
  RUN(3.24.4.L5.2C45.H, "TX ACLR & Spectrum LTE5 2C45 H", mTxSpectrumMeas, DUT0:3.24.4.L5.2C45.H, TS_BLOCK:3.24.4.L5.2C45.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE5_2C65_M_4) BEGIN

  RUN(RS232_OPEN_2C654, "Close RS232 Port", OpenPort, DUT0:DEBUG:DEBUG.02, , )
  RUN(3.24.4.K4.2C65.M, "TX Spectrum LTE5 2C65 M FCC standard", mTxSpectrumMeas, DUT0:3.24.4.K4.2C65.M, TS_BLOCK:3.24.4.K4.2C65.M;TM_AUTOREPEAT_I:2;, )
  RUN(RS232_CLOSE_2C654, "Close RS232 Port", ClosePort, DUT0:DEBUG:DEBUG.01, , )
END_GROUP

GROUP(LTE5_2C85_M_4) BEGIN

  RUN(RS232_OPEN_2C854, "Close RS232 Port", OpenPort, DUT0:DEBUG:DEBUG.02, , )
  RUN(3.24.M4.L5.2C85, "TX Spectrum LTE5 2C85 10W M FCC standard", mTxSpectrumMeas, DUT0:3.24.M4.L5.2C85, TS_BLOCK:3.24.M4.L5.2C85.M;TM_AUTOREPEAT_I:2;, )
  RUN(RS232_CLOSE_2C854, "Close RS232 Port", ClosePort, DUT0:DEBUG:DEBUG.01, , )
END_GROUP


GROUP(LTE15_L_4) BEGIN

  RUN(3.24.4.L15.L, "TX ACLR & Spectrum LTE15 L", mTxSpectrumMeas, DUT0:3.24.4.L15.L, TS_BLOCK:3.24.4.L15.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE15_M_4) BEGIN
END_GROUP

GROUP(LTE15_H_4) BEGIN

  RUN(3.24.4.L15.H, "TX ACLR & Spectrum", mTxSpectrumMeas, DUT0:3.24.4.L15.H, TS_BLOCK:3.24.4.L15.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE20_L_4) BEGIN
  RUN(3.22.4.L20.L , "Temperature TOR", mAbsoluteTemp2, DUT0:3.22.4.L20.L, , )
  RUN(3.21.4.L20.L, "TX Output Power, VGA, Psat & Consumption", mTxPowerAndConsumptionMeas, DUT0:3.21.4.L20.L, TS_BLOCK:3.21.4.L20.L;TS_AUTOREPEAT:2;, )
  RUN(3.24.4.L20.L, "TX ACLR & Spectrum LTE20 L", mTxSpectrumMeas, DUT0:3.24.4.L20.L, TS_BLOCK:3.24.4.L20.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE20_M_4) BEGIN
  RUN(3.21.4.L20.M, "TX Output Power, VGA, Psat & Consumption", mTxPowerAndConsumptionMeas, DUT0:3.21.4.L20.M, TS_BLOCK:3.21.4.L20.M;TS_AUTOREPEAT:2;, )
END_GROUP

GROUP(LTE20_H_4) BEGIN
  RUN(3.22.4.L20.H , "Temperature TOR", mAbsoluteTemp2, DUT0:3.22.4.L20.H, , )
  RUN(3.21.4.L20.H, "TX Output Power, VGA, Psat & Consumption", mTxPowerAndConsumptionMeas, DUT0:3.21.4.L20.H, TS_BLOCK:3.21.4.L20.H;TS_AUTOREPEAT:2;, )
  RUN(3.24.4.L20.H, "TX ACLR & Spectrum LTE20 H", mTxSpectrumMeas, DUT0:3.24.4.L20.H, TS_BLOCK:3.24.4.L20.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE1.4_L_4) BEGIN
  RUN(3.24.4.L1_4.L, "TX ACLR & Spectrum LTE1.4 L", mTxSpectrumMeas, DUT0:3.24.4.L1_4.L, TS_BLOCK:3.24.4.L1_4.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LTE1.4_H_4) BEGIN
  RUN(3.24.4.L1_4.H, "TX ACLR & Spectrum LTE1.4 H", mTxSpectrumMeas, DUT0:3.24.4.L1_4.H, TS_BLOCK:3.24.4.L1_4.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(GSM_4C18.6_L_4) BEGIN
  RUN(3.32.4.G4C18.L, "TX IM GSM 4c L", mTxIntermodulation, DUT0:3.32.4.G4C18.L, TS_BLOCK:3.32.4.G4C18.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(GSM_4C18.6_M_4) BEGIN
  RUN(3.32.4.G4C18.M, "TX IM GSM 4c M", mTxIntermodulation, DUT0:3.32.4.G4C18.M, TS_BLOCK:3.32.4.G4C18.M;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(GSM_4C18.6_H_4) BEGIN
  RUN(3.32.4.G4C18.H, "TX IM GSM 4c H", mTxIntermodulation, DUT0:3.32.4.G4C18.H, TS_BLOCK:3.32.4.G4C18.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(GSM_4C40_L_4) BEGIN
  RUN(3.24.4.G4C40.L, "TX ACLR & Spectrum GSM L", mTxSpectrumMeas, DUT0:3.24.4.G4C40.L, TS_BLOCK:3.24.4.G4C40.L;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(GSM_4C40_H_4) BEGIN
  RUN(3.24.4.G4C40.H, "TX ACLR & Spectrum GSM H", mTxSpectrumMeas, DUT0:3.24.4.G4C40.H, TS_BLOCK:3.24.4.G4C40.H;TM_AUTOREPEAT_I:2;, )
END_GROUP

GROUP(LOAD_SW_1) BEGIN
  RUN(4.01, "Erase Flash Partitions", TmEraseFlashArea, DUT0:4.01, , )
  RUN(4.05, "Load UBOOT to Flash", LoadFileWithFlashLoader, DUT0:4.05, , )
  RUN(4.04, "Load UBOOT ENV to Flash", LoadFileWithFlashLoader, DUT0:4.04, , )
  RUN(4.03, "Load PBOOT to Flash", LoadFileWithFlashLoader, DUT0:4.03, , )
END_GROUP

GROUP(LOAD_SW_2) BEGIN
  RUN(4.02, "Load AUBOOT SW to Flash", LoadFileWithFlashLoader, DUT0:4.02, , )
  RUN(4.10, "Load pre-installed SW", LoadFileWithFlashLoader, DUT0:4.10,TS_BLOCK:4.10:PIS_USE; , )
  RUN(4.10.A, "Load APP SW to Flash", LoadFileWithFlashLoader, DUT0:4.10.A,TS_BLOCK:PIS4.10.A:APPSW_USE; , )
  RUN(SWCHECK2, "Check SW and DB versions", mSaveString, DUT0:SWCHECK2, , )
END_GROUP

GROUP(PRE_AUBOOT_STARTUP) BEGIN
  RUN(PRESWSTARTUP, "PROD DB settings before AUBoot Startup", mExecuteTest, DUT0:PRESWSTARTUP, , )
  RUN(TXEQFTR, "Remove TX EQ filter taps", mRemoveTxEqualizerFilterTaps, DUT0:TXEQFTR, TS_BLOCK:TXEQFT;, )
  RUN(4.07.02, "Save HWDB", mExecuteTest, DUT0:4.07.02, , )
END_GROUP

GROUP(AUBOOT_STARTUP) BEGIN
  RUN(RS232_OPEN, "Open RS232 Port", OpenPort, DUT0:TPA.11, , )
  RUN(4.02.02, "Start and Verify AUBoot & IBoot", VerifyStartupSequence3, DUT0:4.02.02, TS_AUTOREPEAT:1;, )
END_GROUP

GROUP(AP_CHECK) BEGIN
  RUN(APC_DB, "Disable Pd Sync for AP Check", mExecuteTest, DUT0:APC_DB, TS_BLOCK:APC_DB;, )
  RUN(2.34, "Antenna Phase Check L ch", mAntennaPhaseCalibration, DUT0:2.34, TS_BLOCK:2.34;TS_AUTOREPEAT:3;, )
  RUN(TPA.09, "Set Communication Protocol ETSW", CommunicationProtocol, DUT0:COMETSW , , )
  DO(NETBOOT_SETUP)
  DO(NETBOOT_BOOT)
  DO(BP_UPDATE)
  DO(INIT_UNCHECK)
  RUN(SaveAPCData, "Save  APC  Calibration Data in ETSW", mSaveAPCData, DUT0:2.34.1 , , )
  RUN(4.07.02, "Save PROD DB Before Starting AUBOOT", mExecuteTest, DUT0:4.07.02, , )
END_GROUP

GROUP(AP_CAL) BEGIN
  RUN(PRE_AUBOOT, "Set PROD_MODE_SEL Low", TifDoAction, DUT0:TIFC:TIFC.11, , )
  RUN(4.02.02, "Start and Verify AUBoot & IBoot", VerifyStartupSequence3, DUT0:4.02.02, TS_AUTOREPEAT:1;, )
  RUN(PRE_PIS, "Set Communication Protocol", CommunicationProtocol, DUT0:COMPIS , , )
  RUN(START_PIS, "Start APP SW/PIS", VerifyStartupSequence3, DUT0:4.11,TS_AUTOREPEAT:3; , )
  RUN(APC_DB, "Disable Pd Sync for APC", mExecuteTest, DUT0:APC_DB, , )
  RUN(3.39, "Antenna Phase Check L ch", mAntennaPhaseCalibration, DUT0:3.39, TS_BLOCK:2.34;TS_AUTOREPEAT:3;, )
END_GROUP

GROUP(INIT_UNCHECK) BEGIN
  RUN(CPRI_B_OFF, "CPRI off Port B", EnableDisableCpriPort, DUT0:CPRIBOFF, , )
  RUN(DBROLLBACK, "Read PROD DB from Flash", mExecuteTest, DUT0:DBROLLBACK, , )
  DO(PADB_ROLLBACK)
  RUN(PREXENON, "Settings before Xenon Init", mExecuteTest, DUT0:PREXENON, , )
  RUN(XENON_INIT, "Xenon Init", mExecuteTest, DUT0:XENON_INIT_UN, , )
  RUN(POSTXENON, "Settings after Xenon Init", mExecuteTest, DUT0:POSTXENON, , )
  RUN(ASICREV.1, "Asic revision", mSaveString, DUT0:ASICREV.1, , )
  RUN(ASICREV.2, "Asic revision", mSaveString, DUT0:ASICREV.2, , )
END_GROUP

GROUP(HWLOG_ERASE) BEGIN
  RUN(4.01.2, "Erase Flash Partitions", TmEraseFlashArea, DUT0:4.01.2, , )
END_GROUP

GROUP(APPSW_TEST) BEGIN
  RUN(COMPIS, "Set Communication Protocol", CommunicationProtocol, DUT0:COMPIS ,TS_BLOCK:COMPIS; , )
  RUN(4.11, "Start PIS", VerifyStartupSequence3, DUT0:4.11,TS_BLOCK:PIS_USE; , )
  RUN(4.11.A, "Start APP SW", VerifyStartupSequence3, DUT0:4.11.A,TS_BLOCK:APPSW_USE; , )
  DO(STATECACHE_ENABLE_PIS)
  RUN(RUMATPF32, "Delete TPF emulated COM port over CPRI", TmDestroyTPFComPort, DUT0:RUMATPF2 , , )
  RUN(RUMATPF1, "Create TPF emulated COM port over CPRI", TmCreateTPFComPort, DUT0:RUMATPF1 ,TS_AUTOREPEAT:3;TS_BLOCK:RUMATPF; , )
  RUN(RS232_CLOSE_COM11, "Close COM11 Port", ClosePort, DUT0:DEBUG:DEBUG.05, , )
  RUN(RS232_OPEN_COM11, "Open COM11 Port", OpenPort, DUT0:DEBUG:DEBUG.06, , )
  RUN(4.11.1, "Delay", TmDelay_1, DUT0:4.12, , )
  RUN(4.21.1.L5.L, "TX Output Power, VGA, Psat & Consumption LTE 5 L", mTxPowerAndConsumptionMeas, DUT0:4.21.1.L5.L, TS_BLOCK:4.21.1.L5.L;TM_AUTOREPEAT_I:1;, )
  RUN(4.21.2.L5.L, "TX Output Power Comparison ETSW/PIS LTE 5 L", CompareMeasurement, DUT0:4.21.2.L5.L, TS_BLOCK:4.21.2.L5.L;, )
  RUN(4.22.1.L5.L, "TX Spectrum LTE5 L", mTxSpectrumMeas, DUT0:4.22.1.L5.L, TS_BLOCK:4.22.1.L5.L;TM_AUTOREPEAT_I:2;, )
  RUN(4.24.1.L5.2C50.M, "TX ACLR & Spectrum LTE5 2c50 M 60W", mTxSpectrumMeas, DUT0:4.24.1.L5.2C50.M, TS_BLOCK:4.24.1.L5.2C50.M; , )
  //RUN(4.24.1.L5.2C85.M, "TX ACLR & Spectrum LTE5 2c85 M 60W", mTxSpectrumMeas, DUT0:4.24.1.L5.2C85.M, TS_BLOCK:4.24.1.L5.2C85.M; , )
  RUN(TEMP.APPTEST, "Temperatures Application test", mAbsoluteTemp2, DUT0:TEMP.APPTEST, TS_BLOCK:TEMP.APPTEST;, )
  RUN(4.62.L5.L, "RX Noise Figure", mRxNoiseFigure, DUT0:4.62.L5.L, TS_AUTOREPEAT:2;TS_BLOCK:4.62.L5.L;, )
  RUN(4.21.1.L5.M, "TX Output Power, VGA, Psat & Consumption LTE 5 M", mTxPowerAndConsumptionMeas, DUT0:4.21.1.L5.M, TS_BLOCK:4.21.1.L5.M;TM_AUTOREPEAT_I:1;, )
  RUN(4.21.2.L5.M, "TX Output Power Comparison ETSW/PIS LTE 5 M", CompareMeasurement, DUT0:4.21.2.L5.M, TS_BLOCK:4.21.2.L5.M;, )
  RUN(4.22.1.L5.M, "TX Spectrum LTE5 M", mTxSpectrumMeas, DUT0:4.22.1.L5.M, TS_BLOCK:4.22.1.L5.M;TM_AUTOREPEAT_I:2;, )
  RUN(4.61.L5.M, "RX Gain Accuracy", mRxGain, DUT0:4.61.L5.M, TS_BLOCK:4.61.L5.M;, )
  //RUN(4.61.L5.2.M, "RX gain comparison ETSW/PIS M", CompareMeasurement, DUT0:4.61.L5.2.M, TS_BLOCK:4.61.L5.2.M;, )
  RUN(4.62.L5.M, "RX Noise Figure", mRxNoiseFigure, DUT0:4.62.L5.M, TS_AUTOREPEAT:2;TS_BLOCK:4.62.L5.M;, )
  RUN(4.68, "RX EVM", mRxEvm, DUT0:4.68, TS_AUTOREPEAT:1;TS_BLOCK:4.68;, )
  RUN(4.21.1.L5.H, "TX Output Power, VGA, Psat & Consumption LTE 5 H", mTxPowerAndConsumptionMeas, DUT0:4.21.1.L5.H, TS_BLOCK:4.21.1.L5.H;TM_AUTOREPEAT_I:1;, )
  RUN(4.21.2.L5.H, "TX Output Power Comparison ETSW/PIS LTE 5 H", CompareMeasurement, DUT0:4.21.2.L5.H, TS_BLOCK:4.21.2.L5.H;, )
  RUN(4.22.1.L5.H, "TX  Spectrum LTE5 H", mTxSpectrumMeas, DUT0:4.22.1.L5.H, TS_BLOCK:4.22.1.L5.H;TM_AUTOREPEAT_I:2;, )
  RUN(4.62.L5.H, "RX Noise Figure", mRxNoiseFigure, DUT0:4.62.L5.H, TS_AUTOREPEAT:2;TS_BLOCK:4.62.L5.H;, )
  DO(TXOFF_APP)
  DO(STATECACHE_DISABLE_PIS)
  //RUN(4.11.11, "Delay", TmDelay_1, DUT0:4.12, , )
  //RUN(COMPIS1, "Set Communication Protocol", CommunicationProtocol, DUT0:COMPIS1 ,TS_BLOCK:COMPIS1; , )
  //RUN(4.21.1.N20.L, "TX Output Power, VGA & Consumption NR20 L", mTxPowerAndConsumptionMeas, DUT0:4.21.1.N20.L, TS_BLOCK:4.21.1.N20.L;TM_AUTOREPEAT_I:1;, ) 
  //RUN(4.22.1.N20.L, "TX ACLR  NR20 L", mTxSpectrumMeas, DUT0:4.22.1.N20.L, TS_BLOCK:4.22.1.N20.L;TM_AUTOREPEAT_I:2;, )
  //RUN(4.21.1.N20.M, "TX Output Power, VGA & Consumption NR20  M", mTxPowerAndConsumptionMeas, DUT0:4.21.1.N20.M, TS_BLOCK:4.21.1.N20.M;TM_AUTOREPEAT_I:1;, )
  //RUN(4.22.1.N20.M, "TX Spectrum NR20 M", mTxSpectrumMeas, DUT0:4.22.1.N20.M, TS_BLOCK:4.22.1.N20.M;TM_AUTOREPEAT_I:2;, ) 
  //RUN(4.21.1.N20.H, "TX Output Power, VGA, Consumption NR20  H", mTxPowerAndConsumptionMeas, DUT0:4.21.1.N20.H, TS_BLOCK:4.21.1.N20.H;TM_AUTOREPEAT_I:1;, )
  //RUN(4.22.1.N20.H, "TX ACLR  NR20 H", mTxSpectrumMeas, DUT0:4.22.1.N20.H, TS_BLOCK:4.22.1.N20.H;TM_AUTOREPEAT_I:2;, )
  //DO(AP_CHECK, TS_BLOCK:AP_CHECK;, )
  //DO(AP_CAL, TS_BLOCK:AP_CAL;, )
  //DO(TXOFF_APP)
  DO(HWLOG_ERASE)
  //DO(STATECACHE_DISABLE_PIS)
  RUN(RUMATPF2, "Delete TPF emulated COM port over CPRI", TmDestroyTPFComPort, DUT0:RUMATPF2 ,TS_BLOCK:RUMATPF; , )
END_GROUP

GROUP(UNITTEST) BEGIN
  DO(MAINT)
  RUN_SPLIT(SAMPLETEST, "Configure Sample Testing", GetSampleBasedTests, DUT0:SAMPLE, TS_BLOCK:SAMPLE;, )
  DO(TESTHW_INIT, TS_BLOCK:TESTHW_INIT;, )
  DO(DCDC, TS_BLOCK:DCDC;, )
  DO(NETBOOT_SETUP, TS_BLOCK:NETBOOT_SETUP;, )
  DO(NETBOOT_BOOT, TS_BLOCK:NETBOOT_BOOT;, )
  //RUN(NETBB.06, "Check ETSW boot OK or not", mBlockTPStatementMargin, DUT0:NETBB, , )
  //DO(REDO_NTEBOOT_BOOT, TS_BLOCK:REBOOT_ETSW;, )
  DO(PROD_DB_UPDATE, TS_BLOCK:PROD_DB_UPDATE;, )
  DO(BP_UPDATE, TS_BLOCK:BP_UPDATE;, )
  DO(INIT, TS_BLOCK:INIT;, )
  DO(SFP_SIGNALS, TS_BLOCK:SFP_SIGNALS;, )
  DO(LED, TS_BLOCK:LED;, )
  SPLIT(LOAD_SW_1, TS_BLOCK:LOAD_SW_1;, )
  DO(DIGITAL, TS_BLOCK:DIGITAL;, )
JOIN
  DO(VSWR_CALCULATE_S11, TS_BLOCK:DVSWR;, )
  DO(DIGITAL_2, TS_BLOCK:DIGITAL;, )
  DO(RETURNLOSS, TS_BLOCK:RETURNLOSS;, )

  DO(RXCAL, TS_BLOCK:RXCAL;, )
  DO(RXPERF, TS_BLOCK:RXPERF;, )

  DO(TXCAL, TS_BLOCK:TXCAL;, )
  SPLIT(LOAD_SW_2, TS_BLOCK:LOAD_SW_2;, )
  DO(TXPERF, TS_BLOCK:TXPERF;, )
JOIN
  DO(PRE_AUBOOT_STARTUP, TS_BLOCK:PRE_AUBOOT_STARTUP;, )
  DO(AUBOOT_STARTUP, TS_BLOCK:AUBOOT_STARTUP;, )
  DO(APPSW_TEST, TS_BLOCK:APPSW_TEST;, )
END_GROUP

GROUP(DEBUG) BEGIN
  RUN(RS232_OPEN_D, "Open RS232 Port", OpenPort, DUT0:DEBUG:DEBUG.02, , )
  RUN(RS232_CLOSE_D, "Close RS232 Port", ClosePort, DUT0:DEBUG:DEBUG.01, , )
  RUN(TELNET_OPEN, "Open DUT Telnet Port", OpenPort, DUT0:TELNET:TELNET.01, , )
  RUN(TELNET_CLOSE, "Close DUT Telnet Port", ClosePort, DUT0:TELNET:TELNET.02, , )
  RUN(2.21.C.A, "Characterize PA Transistors A", mCalibratePaVddAndBias2, DUT0:2.21.C.A, , )
  RUN(2.21.C.B, "Characterize PA Transistors B", mCalibratePaVddAndBias2, DUT0:2.21.C.B, , )
  RUN(2.21.C.C, "Characterize PA Transistors C", mCalibratePaVddAndBias2, DUT0:2.21.C.C, , )
  RUN(2.21.C.D, "Characterize PA Transistors D", mCalibratePaVddAndBias2, DUT0:2.21.C.D, , )
  RUN(TPA.09, "Set Communication Protocol ETSW", CommunicationProtocol, DUT0:COMETSW , , )
  DO(PERF_INIT)
  DO(DCFirm_Load)
END_GROUP


GROUP(INIT_PRE) BEGIN
  RUN(CPRI_B_OFF, "CPRI off Port B", EnableDisableCpriPort, DUT0:CPRIBOFF, , )
  RUN(DBROLLBACK, "Read PROD DB from Flash", mExecuteTest, DUT0:DBROLLBACK, , )
  RUN(PREXENON, "Settings before Xenon Init", mExecuteTest, DUT0:PREXENON, , )
  DO(XENON)
  RUN(XENON_INIT, "Xenon Init", mExecuteTest, DUT0:XENON_INIT, , )
  RUN(POSTXENON, "Settings after Xenon Init", mExecuteTest, DUT0:POSTXENON, , )
  RUN(ASICREV.1, "Asic revision", mSaveString, DUT0:ASICREV.1, , )
  RUN(ASICREV.2, "Asic revision", mSaveString, DUT0:ASICREV.2, , )
END_GROUP

GROUP(PERF_INIT) BEGIN
  DO(TESTHW_INIT)
  DO(DCDC)
  DO(NETBOOT_SETUP)
  DO(NETBOOT_BOOT)
  DO(BP_UPDATE)
  DO(INIT_PRE)
  DO(HICURRENT)
  DO(PADB_ROLLBACK)
END_GROUP

GROUP(PADB_ROLLBACK) BEGIN
  RUN(PADB_ROLLBACK, "PA DB rollback", mExecuteTest, DUT0:PADBROLLBACK, , )
END_GROUP

MANUAL BEGIN
  DO(UNITTEST)
  DO(DEBUG)
END_MANUAL

AUTO BEGIN
  DO(UNITTEST)
END_AUTO

